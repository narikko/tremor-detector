
tremor-detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c4  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08005684  08005684  00006684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800574c  0800574c  00007090  2**0
                  CONTENTS
  4 .ARM          00000008  0800574c  0800574c  0000674c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005754  08005754  00007090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005754  08005754  00006754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005758  08005758  00006758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800575c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000090  080057ec  00007090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  080057ec  0000733c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120f5  00000000  00000000  000070c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002627  00000000  00000000  000191b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  0001b7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5b  00000000  00000000  0001c698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a378  00000000  00000000  0001d1f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e7c  00000000  00000000  0004756b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001034da  00000000  00000000  0005a3e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d8c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004168  00000000  00000000  0015d904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00161a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000090 	.word	0x20000090
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800566c 	.word	0x0800566c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000094 	.word	0x20000094
 80001fc:	0800566c 	.word	0x0800566c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b09e      	sub	sp, #120	@ 0x78
 80005a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fd91 	bl	80010cc <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_ACCELERO_Init();
 80005aa:	f000 fa7f 	bl	8000aac <BSP_ACCELERO_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f831 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f90d 	bl	80007d0 <MX_GPIO_Init>
  MX_I2C2_Init();
 80005b6:	f000 f87f 	bl	80006b8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80005ba:	f000 f8bd 	bl	8000738 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_ACCELERO_AccGetXYZ(acceleroVal);
 80005be:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fab0 	bl	8000b28 <BSP_ACCELERO_AccGetXYZ>
	  sprintf(output, "Acceleration (X,Y,Z): %d, %d, %d\r\n",
  			(int) acceleroVal[0], (int) acceleroVal[1], (int) acceleroVal[2]);
 80005c8:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
	  sprintf(output, "Acceleration (X,Y,Z): %d, %d, %d\r\n",
 80005cc:	461a      	mov	r2, r3
  			(int) acceleroVal[0], (int) acceleroVal[1], (int) acceleroVal[2]);
 80005ce:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
	  sprintf(output, "Acceleration (X,Y,Z): %d, %d, %d\r\n",
 80005d2:	4619      	mov	r1, r3
  			(int) acceleroVal[0], (int) acceleroVal[1], (int) acceleroVal[2]);
 80005d4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
	  sprintf(output, "Acceleration (X,Y,Z): %d, %d, %d\r\n",
 80005d8:	1d38      	adds	r0, r7, #4
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	460b      	mov	r3, r1
 80005de:	490b      	ldr	r1, [pc, #44]	@ (800060c <main+0x6c>)
 80005e0:	f004 fba4 	bl	8004d2c <siprintf>
	  uint16_t len = strlen(output);
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fe0a 	bl	8000200 <strlen>
 80005ec:	4603      	mov	r3, r0
 80005ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	  HAL_UART_Transmit(&huart1, (uint8_t*)output, len, 10000);
 80005f2:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80005f6:	1d39      	adds	r1, r7, #4
 80005f8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80005fc:	4804      	ldr	r0, [pc, #16]	@ (8000610 <main+0x70>)
 80005fe:	f003 fce9 	bl	8003fd4 <HAL_UART_Transmit>

	  HAL_Delay(100);
 8000602:	2064      	movs	r0, #100	@ 0x64
 8000604:	f000 fdd6 	bl	80011b4 <HAL_Delay>
  {
 8000608:	bf00      	nop
 800060a:	e7d8      	b.n	80005be <main+0x1e>
 800060c:	08005684 	.word	0x08005684
 8000610:	20000100 	.word	0x20000100

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b096      	sub	sp, #88	@ 0x58
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	2244      	movs	r2, #68	@ 0x44
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f004 fba2 	bl	8004d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	463b      	mov	r3, r7
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000636:	2000      	movs	r0, #0
 8000638:	f001 ffe8 	bl	800260c <HAL_PWREx_ControlVoltageScaling>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000642:	f000 f8dd 	bl	8000800 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000646:	2310      	movs	r3, #16
 8000648:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800064a:	2301      	movs	r3, #1
 800064c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000652:	2360      	movs	r3, #96	@ 0x60
 8000654:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800065a:	2301      	movs	r3, #1
 800065c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800065e:	2301      	movs	r3, #1
 8000660:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000662:	233c      	movs	r3, #60	@ 0x3c
 8000664:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4618      	mov	r0, r3
 8000678:	f002 f86c 	bl	8002754 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000682:	f000 f8bd 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2303      	movs	r3, #3
 800068c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	2105      	movs	r1, #5
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 fc72 	bl	8002f88 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006aa:	f000 f8a9 	bl	8000800 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3758      	adds	r7, #88	@ 0x58
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <MX_I2C2_Init+0x74>)
 80006be:	4a1c      	ldr	r2, [pc, #112]	@ (8000730 <MX_I2C2_Init+0x78>)
 80006c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <MX_I2C2_Init+0x74>)
 80006c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000734 <MX_I2C2_Init+0x7c>)
 80006c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006c8:	4b18      	ldr	r3, [pc, #96]	@ (800072c <MX_I2C2_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ce:	4b17      	ldr	r3, [pc, #92]	@ (800072c <MX_I2C2_Init+0x74>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d4:	4b15      	ldr	r3, [pc, #84]	@ (800072c <MX_I2C2_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006da:	4b14      	ldr	r3, [pc, #80]	@ (800072c <MX_I2C2_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_I2C2_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_I2C2_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_I2C2_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006f2:	480e      	ldr	r0, [pc, #56]	@ (800072c <MX_I2C2_Init+0x74>)
 80006f4:	f001 f918 	bl	8001928 <HAL_I2C_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006fe:	f000 f87f 	bl	8000800 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000702:	2100      	movs	r1, #0
 8000704:	4809      	ldr	r0, [pc, #36]	@ (800072c <MX_I2C2_Init+0x74>)
 8000706:	f001 fec9 	bl	800249c <HAL_I2CEx_ConfigAnalogFilter>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000710:	f000 f876 	bl	8000800 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000714:	2100      	movs	r1, #0
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <MX_I2C2_Init+0x74>)
 8000718:	f001 ff0b 	bl	8002532 <HAL_I2CEx_ConfigDigitalFilter>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000722:	f000 f86d 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000ac 	.word	0x200000ac
 8000730:	40005800 	.word	0x40005800
 8000734:	30a175ab 	.word	0x30a175ab

08000738 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800073c:	4b22      	ldr	r3, [pc, #136]	@ (80007c8 <MX_USART1_UART_Init+0x90>)
 800073e:	4a23      	ldr	r2, [pc, #140]	@ (80007cc <MX_USART1_UART_Init+0x94>)
 8000740:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000742:	4b21      	ldr	r3, [pc, #132]	@ (80007c8 <MX_USART1_UART_Init+0x90>)
 8000744:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000748:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <MX_USART1_UART_Init+0x90>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <MX_USART1_UART_Init+0x90>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000756:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_USART1_UART_Init+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <MX_USART1_UART_Init+0x90>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_USART1_UART_Init+0x90>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_USART1_UART_Init+0x90>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076e:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_USART1_UART_Init+0x90>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000774:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_USART1_UART_Init+0x90>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077a:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <MX_USART1_UART_Init+0x90>)
 800077c:	2200      	movs	r2, #0
 800077e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000780:	4811      	ldr	r0, [pc, #68]	@ (80007c8 <MX_USART1_UART_Init+0x90>)
 8000782:	f003 fbd7 	bl	8003f34 <HAL_UART_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800078c:	f000 f838 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000790:	2100      	movs	r1, #0
 8000792:	480d      	ldr	r0, [pc, #52]	@ (80007c8 <MX_USART1_UART_Init+0x90>)
 8000794:	f004 fa00 	bl	8004b98 <HAL_UARTEx_SetTxFifoThreshold>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800079e:	f000 f82f 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a2:	2100      	movs	r1, #0
 80007a4:	4808      	ldr	r0, [pc, #32]	@ (80007c8 <MX_USART1_UART_Init+0x90>)
 80007a6:	f004 fa35 	bl	8004c14 <HAL_UARTEx_SetRxFifoThreshold>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007b0:	f000 f826 	bl	8000800 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	@ (80007c8 <MX_USART1_UART_Init+0x90>)
 80007b6:	f004 f9b6 	bl	8004b26 <HAL_UARTEx_DisableFifoMode>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007c0:	f000 f81e 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000100 	.word	0x20000100
 80007cc:	40013800 	.word	0x40013800

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_GPIO_Init+0x2c>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	4a08      	ldr	r2, [pc, #32]	@ (80007fc <MX_GPIO_Init+0x2c>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_GPIO_Init+0x2c>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <Error_Handler+0x8>

0800080c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000814:	4b27      	ldr	r3, [pc, #156]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 8000816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000818:	4a26      	ldr	r2, [pc, #152]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 800081a:	f043 0302 	orr.w	r3, r3, #2
 800081e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000820:	4b24      	ldr	r3, [pc, #144]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 8000822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000824:	f003 0302 	and.w	r3, r3, #2
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800082c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000830:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000832:	2312      	movs	r3, #18
 8000834:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000836:	2301      	movs	r3, #1
 8000838:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800083e:	2304      	movs	r3, #4
 8000840:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	481b      	ldr	r0, [pc, #108]	@ (80008b8 <I2Cx_MspInit+0xac>)
 800084a:	f000 fde9 	bl	8001420 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4818      	ldr	r0, [pc, #96]	@ (80008b8 <I2Cx_MspInit+0xac>)
 8000856:	f000 fde3 	bl	8001420 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800085a:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800085e:	4a15      	ldr	r2, [pc, #84]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 8000860:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000864:	6593      	str	r3, [r2, #88]	@ 0x58
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800086a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000872:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 8000874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000876:	4a0f      	ldr	r2, [pc, #60]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 8000878:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800087c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800087e:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 8000880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000882:	4a0c      	ldr	r2, [pc, #48]	@ (80008b4 <I2Cx_MspInit+0xa8>)
 8000884:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000888:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	210f      	movs	r1, #15
 800088e:	2021      	movs	r0, #33	@ 0x21
 8000890:	f000 fd8f 	bl	80013b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000894:	2021      	movs	r0, #33	@ 0x21
 8000896:	f000 fda8 	bl	80013ea <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	210f      	movs	r1, #15
 800089e:	2022      	movs	r0, #34	@ 0x22
 80008a0:	f000 fd87 	bl	80013b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80008a4:	2022      	movs	r0, #34	@ 0x22
 80008a6:	f000 fda0 	bl	80013ea <HAL_NVIC_EnableIRQ>
}
 80008aa:	bf00      	nop
 80008ac:	3728      	adds	r7, #40	@ 0x28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48000400 	.word	0x48000400

080008bc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a12      	ldr	r2, [pc, #72]	@ (8000910 <I2Cx_Init+0x54>)
 80008c8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a11      	ldr	r2, [pc, #68]	@ (8000914 <I2Cx_Init+0x58>)
 80008ce:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2201      	movs	r2, #1
 80008da:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ff89 	bl	800080c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f001 f814 	bl	8001928 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000900:	2100      	movs	r1, #0
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f001 fdca 	bl	800249c <HAL_I2CEx_ConfigAnalogFilter>
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40005800 	.word	0x40005800
 8000914:	00702681 	.word	0x00702681

08000918 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	@ 0x28
 800091c:	af04      	add	r7, sp, #16
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	4608      	mov	r0, r1
 8000922:	4611      	mov	r1, r2
 8000924:	461a      	mov	r2, r3
 8000926:	4603      	mov	r3, r0
 8000928:	72fb      	strb	r3, [r7, #11]
 800092a:	460b      	mov	r3, r1
 800092c:	813b      	strh	r3, [r7, #8]
 800092e:	4613      	mov	r3, r2
 8000930:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000932:	2300      	movs	r3, #0
 8000934:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	b299      	uxth	r1, r3
 800093a:	88f8      	ldrh	r0, [r7, #6]
 800093c:	893a      	ldrh	r2, [r7, #8]
 800093e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000942:	9302      	str	r3, [sp, #8]
 8000944:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000946:	9301      	str	r3, [sp, #4]
 8000948:	6a3b      	ldr	r3, [r7, #32]
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	4603      	mov	r3, r0
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f001 f9c8 	bl	8001ce4 <HAL_I2C_Mem_Read>
 8000954:	4603      	mov	r3, r0
 8000956:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000958:	7dfb      	ldrb	r3, [r7, #23]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d004      	beq.n	8000968 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800095e:	7afb      	ldrb	r3, [r7, #11]
 8000960:	4619      	mov	r1, r3
 8000962:	68f8      	ldr	r0, [r7, #12]
 8000964:	f000 f832 	bl	80009cc <I2Cx_Error>
  }
  return status;
 8000968:	7dfb      	ldrb	r3, [r7, #23]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b08a      	sub	sp, #40	@ 0x28
 8000976:	af04      	add	r7, sp, #16
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	4608      	mov	r0, r1
 800097c:	4611      	mov	r1, r2
 800097e:	461a      	mov	r2, r3
 8000980:	4603      	mov	r3, r0
 8000982:	72fb      	strb	r3, [r7, #11]
 8000984:	460b      	mov	r3, r1
 8000986:	813b      	strh	r3, [r7, #8]
 8000988:	4613      	mov	r3, r2
 800098a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800098c:	2300      	movs	r3, #0
 800098e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000990:	7afb      	ldrb	r3, [r7, #11]
 8000992:	b299      	uxth	r1, r3
 8000994:	88f8      	ldrh	r0, [r7, #6]
 8000996:	893a      	ldrh	r2, [r7, #8]
 8000998:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800099c:	9302      	str	r3, [sp, #8]
 800099e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80009a0:	9301      	str	r3, [sp, #4]
 80009a2:	6a3b      	ldr	r3, [r7, #32]
 80009a4:	9300      	str	r3, [sp, #0]
 80009a6:	4603      	mov	r3, r0
 80009a8:	68f8      	ldr	r0, [r7, #12]
 80009aa:	f001 f887 	bl	8001abc <HAL_I2C_Mem_Write>
 80009ae:	4603      	mov	r3, r0
 80009b0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80009b2:	7dfb      	ldrb	r3, [r7, #23]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d004      	beq.n	80009c2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80009b8:	7afb      	ldrb	r3, [r7, #11]
 80009ba:	4619      	mov	r1, r3
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f000 f805 	bl	80009cc <I2Cx_Error>
  }
  return status;
 80009c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f001 f840 	bl	8001a5e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ff6c 	bl	80008bc <I2Cx_Init>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80009f0:	4802      	ldr	r0, [pc, #8]	@ (80009fc <SENSOR_IO_Init+0x10>)
 80009f2:	f7ff ff63 	bl	80008bc <I2Cx_Init>
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000194 	.word	0x20000194

08000a00 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af02      	add	r7, sp, #8
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	71bb      	strb	r3, [r7, #6]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000a12:	79bb      	ldrb	r3, [r7, #6]
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	79f9      	ldrb	r1, [r7, #7]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	1d7b      	adds	r3, r7, #5
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2301      	movs	r3, #1
 8000a22:	4803      	ldr	r0, [pc, #12]	@ (8000a30 <SENSOR_IO_Write+0x30>)
 8000a24:	f7ff ffa5 	bl	8000972 <I2Cx_WriteMultiple>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000194 	.word	0x20000194

08000a34 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	71fb      	strb	r3, [r7, #7]
 8000a40:	4613      	mov	r3, r2
 8000a42:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8000a48:	79bb      	ldrb	r3, [r7, #6]
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	79f9      	ldrb	r1, [r7, #7]
 8000a4e:	2301      	movs	r3, #1
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	f107 030f 	add.w	r3, r7, #15
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	2301      	movs	r3, #1
 8000a5a:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <SENSOR_IO_Read+0x38>)
 8000a5c:	f7ff ff5c 	bl	8000918 <I2Cx_ReadMultiple>

  return read_value;
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000194 	.word	0x20000194

08000a70 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	603a      	str	r2, [r7, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	71bb      	strb	r3, [r7, #6]
 8000a82:	4613      	mov	r3, r2
 8000a84:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8000a86:	79bb      	ldrb	r3, [r7, #6]
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	79f9      	ldrb	r1, [r7, #7]
 8000a8c:	88bb      	ldrh	r3, [r7, #4]
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	2301      	movs	r3, #1
 8000a96:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <SENSOR_IO_ReadMultiple+0x38>)
 8000a98:	f7ff ff3e 	bl	8000918 <I2Cx_ReadMultiple>
 8000a9c:	4603      	mov	r3, r0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000194 	.word	0x20000194

08000aac <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8000aba:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <BSP_ACCELERO_Init+0x74>)
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	4798      	blx	r3
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b6a      	cmp	r3, #106	@ 0x6a
 8000ac4:	d002      	beq.n	8000acc <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	e024      	b.n	8000b16 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8000acc:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <BSP_ACCELERO_Init+0x78>)
 8000ace:	4a14      	ldr	r2, [pc, #80]	@ (8000b20 <BSP_ACCELERO_Init+0x74>)
 8000ad0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8000ad2:	2330      	movs	r3, #48	@ 0x30
 8000ad4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8000ada:	2300      	movs	r3, #0
 8000adc:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8000ade:	2340      	movs	r3, #64	@ 0x40
 8000ae0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8000aea:	797a      	ldrb	r2, [r7, #5]
 8000aec:	7abb      	ldrb	r3, [r7, #10]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8000af4:	7a3b      	ldrb	r3, [r7, #8]
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	021b      	lsls	r3, r3, #8
 8000afe:	b21a      	sxth	r2, r3
 8000b00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	b21b      	sxth	r3, r3
 8000b08:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <BSP_ACCELERO_Init+0x78>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	89ba      	ldrh	r2, [r7, #12]
 8000b12:	4610      	mov	r0, r2
 8000b14:	4798      	blx	r3
  }  

  return ret;
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000004 	.word	0x20000004
 8000b24:	200001e8 	.word	0x200001e8

08000b28 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d009      	beq.n	8000b4c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d004      	beq.n	8000b4c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8000b42:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	4798      	blx	r3
    }
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200001e8 	.word	0x200001e8

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b62:	4a0e      	ldr	r2, [pc, #56]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7a:	4a08      	ldr	r2, [pc, #32]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_MspInit+0x44>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b0ae      	sub	sp, #184	@ 0xb8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	2294      	movs	r2, #148	@ 0x94
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f004 f8d3 	bl	8004d6c <memset>
  if(hi2c->Instance==I2C2)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a21      	ldr	r2, [pc, #132]	@ (8000c50 <HAL_I2C_MspInit+0xb0>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d13b      	bne.n	8000c48 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000bd0:	2380      	movs	r3, #128	@ 0x80
 8000bd2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 fc91 	bl	8003504 <HAL_RCCEx_PeriphCLKConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000be8:	f7ff fe0a 	bl	8000800 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bec:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <HAL_I2C_MspInit+0xb4>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf0:	4a18      	ldr	r2, [pc, #96]	@ (8000c54 <HAL_I2C_MspInit+0xb4>)
 8000bf2:	f043 0302 	orr.w	r3, r3, #2
 8000bf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf8:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <HAL_I2C_MspInit+0xb4>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c04:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0c:	2312      	movs	r3, #18
 8000c0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480b      	ldr	r0, [pc, #44]	@ (8000c58 <HAL_I2C_MspInit+0xb8>)
 8000c2c:	f000 fbf8 	bl	8001420 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c30:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <HAL_I2C_MspInit+0xb4>)
 8000c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c34:	4a07      	ldr	r2, [pc, #28]	@ (8000c54 <HAL_I2C_MspInit+0xb4>)
 8000c36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <HAL_I2C_MspInit+0xb4>)
 8000c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000c48:	bf00      	nop
 8000c4a:	37b8      	adds	r7, #184	@ 0xb8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40005800 	.word	0x40005800
 8000c54:	40021000 	.word	0x40021000
 8000c58:	48000400 	.word	0x48000400

08000c5c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0b      	ldr	r2, [pc, #44]	@ (8000c98 <HAL_I2C_MspDeInit+0x3c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d10f      	bne.n	8000c8e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <HAL_I2C_MspDeInit+0x40>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <HAL_I2C_MspDeInit+0x40>)
 8000c74:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000c78:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8000c7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c7e:	4808      	ldr	r0, [pc, #32]	@ (8000ca0 <HAL_I2C_MspDeInit+0x44>)
 8000c80:	f000 fd60 	bl	8001744 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8000c84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c88:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <HAL_I2C_MspDeInit+0x44>)
 8000c8a:	f000 fd5b 	bl	8001744 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40005800 	.word	0x40005800
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	48000400 	.word	0x48000400

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b0ae      	sub	sp, #184	@ 0xb8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	2294      	movs	r2, #148	@ 0x94
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f004 f851 	bl	8004d6c <memset>
  if(huart->Instance==USART1)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a21      	ldr	r2, [pc, #132]	@ (8000d54 <HAL_UART_MspInit+0xb0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d13a      	bne.n	8000d4a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f002 fc0f 	bl	8003504 <HAL_RCCEx_PeriphCLKConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cec:	f7ff fd88 	bl	8000800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cf0:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <HAL_UART_MspInit+0xb4>)
 8000cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cf4:	4a18      	ldr	r2, [pc, #96]	@ (8000d58 <HAL_UART_MspInit+0xb4>)
 8000cf6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cfa:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cfc:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <HAL_UART_MspInit+0xb4>)
 8000cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <HAL_UART_MspInit+0xb4>)
 8000d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0c:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <HAL_UART_MspInit+0xb4>)
 8000d0e:	f043 0302 	orr.w	r3, r3, #2
 8000d12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d14:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <HAL_UART_MspInit+0xb4>)
 8000d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d20:	23c0      	movs	r3, #192	@ 0xc0
 8000d22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <HAL_UART_MspInit+0xb8>)
 8000d46:	f000 fb6b 	bl	8001420 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d4a:	bf00      	nop
 8000d4c:	37b8      	adds	r7, #184	@ 0xb8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40013800 	.word	0x40013800
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48000400 	.word	0x48000400

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <NMI_Handler+0x4>

08000d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <MemManage_Handler+0x4>

08000d78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db6:	f000 f9dd 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	@ (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	@ (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df0:	f003 ffc4 	bl	8004d7c <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e00:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e06:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	@ (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200a0000 	.word	0x200a0000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	200001ec 	.word	0x200001ec
 8000e28:	20000340 	.word	0x20000340

08000e2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	@ (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e54:	f7ff ffea 	bl	8000e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e58:	480c      	ldr	r0, [pc, #48]	@ (8000e8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5a:	490d      	ldr	r1, [pc, #52]	@ (8000e90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e94 <LoopForever+0xe>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e70:	4c0a      	ldr	r4, [pc, #40]	@ (8000e9c <LoopForever+0x16>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f003 ff83 	bl	8004d88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e82:	f7ff fb8d 	bl	80005a0 <main>

08000e86 <LoopForever>:

LoopForever:
    b LoopForever
 8000e86:	e7fe      	b.n	8000e86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e88:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e94:	0800575c 	.word	0x0800575c
  ldr r2, =_sbss
 8000e98:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e9c:	2000033c 	.word	0x2000033c

08000ea0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC1_IRQHandler>

08000ea2 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b084      	sub	sp, #16
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000eb0:	2110      	movs	r1, #16
 8000eb2:	20d4      	movs	r0, #212	@ 0xd4
 8000eb4:	f7ff fdbe 	bl	8000a34 <SENSOR_IO_Read>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8000ec0:	7bbb      	ldrb	r3, [r7, #14]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000ec8:	7bba      	ldrb	r2, [r7, #14]
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	2110      	movs	r1, #16
 8000ed6:	20d4      	movs	r0, #212	@ 0xd4
 8000ed8:	f7ff fd92 	bl	8000a00 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000edc:	2112      	movs	r1, #18
 8000ede:	20d4      	movs	r0, #212	@ 0xd4
 8000ee0:	f7ff fda8 	bl	8000a34 <SENSOR_IO_Read>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	0a1b      	lsrs	r3, r3, #8
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8000ef0:	7bbb      	ldrb	r3, [r7, #14]
 8000ef2:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8000ef6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8000ef8:	7bba      	ldrb	r2, [r7, #14]
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8000f00:	7bbb      	ldrb	r3, [r7, #14]
 8000f02:	461a      	mov	r2, r3
 8000f04:	2112      	movs	r1, #18
 8000f06:	20d4      	movs	r0, #212	@ 0xd4
 8000f08:	f7ff fd7a 	bl	8000a00 <SENSOR_IO_Write>
}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000f1e:	2110      	movs	r1, #16
 8000f20:	20d4      	movs	r0, #212	@ 0xd4
 8000f22:	f7ff fd87 	bl	8000a34 <SENSOR_IO_Read>
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 030f 	and.w	r3, r3, #15
 8000f30:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	461a      	mov	r2, r3
 8000f36:	2110      	movs	r1, #16
 8000f38:	20d4      	movs	r0, #212	@ 0xd4
 8000f3a:	f7ff fd61 	bl	8000a00 <SENSOR_IO_Write>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8000f4a:	f7ff fd4f 	bl	80009ec <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8000f4e:	210f      	movs	r1, #15
 8000f50:	20d4      	movs	r0, #212	@ 0xd4
 8000f52:	f7ff fd6f 	bl	8000a34 <SENSOR_IO_Read>
 8000f56:	4603      	mov	r3, r0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8000f6a:	2115      	movs	r1, #21
 8000f6c:	20d4      	movs	r0, #212	@ 0xd4
 8000f6e:	f7ff fd61 	bl	8000a34 <SENSOR_IO_Read>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	f023 0310 	bic.w	r3, r3, #16
 8000f7c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	f043 0310 	orr.w	r3, r3, #16
 8000f8a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	2115      	movs	r1, #21
 8000f92:	20d4      	movs	r0, #212	@ 0xd4
 8000f94:	f7ff fd34 	bl	8000a00 <SENSOR_IO_Write>
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	20d4      	movs	r0, #212	@ 0xd4
 8000fba:	f7ff fd3b 	bl	8000a34 <SENSOR_IO_Read>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8000fc2:	f107 0208 	add.w	r2, r7, #8
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	2128      	movs	r1, #40	@ 0x28
 8000fca:	20d4      	movs	r0, #212	@ 0xd4
 8000fcc:	f7ff fd50 	bl	8000a70 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	77fb      	strb	r3, [r7, #31]
 8000fd4:	e01a      	b.n	800100c <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000fd6:	7ffb      	ldrb	r3, [r7, #31]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	3301      	adds	r3, #1
 8000fdc:	3320      	adds	r3, #32
 8000fde:	443b      	add	r3, r7
 8000fe0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	7ffa      	ldrb	r2, [r7, #31]
 8000fea:	0052      	lsls	r2, r2, #1
 8000fec:	3220      	adds	r2, #32
 8000fee:	443a      	add	r2, r7
 8000ff0:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	7ffb      	ldrb	r3, [r7, #31]
 8000ffa:	b212      	sxth	r2, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	3320      	adds	r3, #32
 8001000:	443b      	add	r3, r7
 8001002:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001006:	7ffb      	ldrb	r3, [r7, #31]
 8001008:	3301      	adds	r3, #1
 800100a:	77fb      	strb	r3, [r7, #31]
 800100c:	7ffb      	ldrb	r3, [r7, #31]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d9e1      	bls.n	8000fd6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001012:	7dfb      	ldrb	r3, [r7, #23]
 8001014:	f003 030c 	and.w	r3, r3, #12
 8001018:	2b0c      	cmp	r3, #12
 800101a:	d829      	bhi.n	8001070 <LSM6DSL_AccReadXYZ+0xd0>
 800101c:	a201      	add	r2, pc, #4	@ (adr r2, 8001024 <LSM6DSL_AccReadXYZ+0x84>)
 800101e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001022:	bf00      	nop
 8001024:	08001059 	.word	0x08001059
 8001028:	08001071 	.word	0x08001071
 800102c:	08001071 	.word	0x08001071
 8001030:	08001071 	.word	0x08001071
 8001034:	0800106b 	.word	0x0800106b
 8001038:	08001071 	.word	0x08001071
 800103c:	08001071 	.word	0x08001071
 8001040:	08001071 	.word	0x08001071
 8001044:	0800105f 	.word	0x0800105f
 8001048:	08001071 	.word	0x08001071
 800104c:	08001071 	.word	0x08001071
 8001050:	08001071 	.word	0x08001071
 8001054:	08001065 	.word	0x08001065
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001058:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <LSM6DSL_AccReadXYZ+0x11c>)
 800105a:	61bb      	str	r3, [r7, #24]
    break;
 800105c:	e008      	b.n	8001070 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <LSM6DSL_AccReadXYZ+0x120>)
 8001060:	61bb      	str	r3, [r7, #24]
    break;
 8001062:	e005      	b.n	8001070 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001064:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <LSM6DSL_AccReadXYZ+0x124>)
 8001066:	61bb      	str	r3, [r7, #24]
    break;
 8001068:	e002      	b.n	8001070 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800106a:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <LSM6DSL_AccReadXYZ+0x128>)
 800106c:	61bb      	str	r3, [r7, #24]
    break;    
 800106e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001070:	2300      	movs	r3, #0
 8001072:	77fb      	strb	r3, [r7, #31]
 8001074:	e01a      	b.n	80010ac <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001076:	7ffb      	ldrb	r3, [r7, #31]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	3320      	adds	r3, #32
 800107c:	443b      	add	r3, r7
 800107e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800108a:	edd7 7a06 	vldr	s15, [r7, #24]
 800108e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001092:	7ffb      	ldrb	r3, [r7, #31]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109e:	ee17 2a90 	vmov	r2, s15
 80010a2:	b212      	sxth	r2, r2
 80010a4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80010a6:	7ffb      	ldrb	r3, [r7, #31]
 80010a8:	3301      	adds	r3, #1
 80010aa:	77fb      	strb	r3, [r7, #31]
 80010ac:	7ffb      	ldrb	r3, [r7, #31]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d9e1      	bls.n	8001076 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	3d79db23 	.word	0x3d79db23
 80010c0:	3df9db23 	.word	0x3df9db23
 80010c4:	3e79db23 	.word	0x3e79db23
 80010c8:	3ef9db23 	.word	0x3ef9db23

080010cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d6:	2003      	movs	r0, #3
 80010d8:	f000 f960 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010dc:	2000      	movs	r0, #0
 80010de:	f000 f80d 	bl	80010fc <HAL_InitTick>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	e001      	b.n	80010f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ee:	f7ff fd33 	bl	8000b58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f2:	79fb      	ldrb	r3, [r7, #7]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001108:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <HAL_InitTick+0x6c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d023      	beq.n	8001158 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001110:	4b16      	ldr	r3, [pc, #88]	@ (800116c <HAL_InitTick+0x70>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <HAL_InitTick+0x6c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f96d 	bl	8001406 <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10f      	bne.n	8001152 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d809      	bhi.n	800114c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f000 f937 	bl	80013b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001144:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <HAL_InitTick+0x74>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e007      	b.n	800115c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	e004      	b.n	800115c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	e001      	b.n	800115c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800115c:	7bfb      	ldrb	r3, [r7, #15]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000003c 	.word	0x2000003c
 800116c:	20000000 	.word	0x20000000
 8001170:	20000038 	.word	0x20000038

08001174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_IncTick+0x20>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_IncTick+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <HAL_IncTick+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	2000003c 	.word	0x2000003c
 8001198:	200001f0 	.word	0x200001f0

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b03      	ldr	r3, [pc, #12]	@ (80011b0 <HAL_GetTick+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200001f0 	.word	0x200001f0

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff ffee 	bl	800119c <HAL_GetTick>
 80011c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011cc:	d005      	beq.n	80011da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011ce:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <HAL_Delay+0x44>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011da:	bf00      	nop
 80011dc:	f7ff ffde 	bl	800119c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8f7      	bhi.n	80011dc <HAL_Delay+0x28>
  {
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000003c 	.word	0x2000003c

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	@ (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	@ (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4907      	ldr	r1, [pc, #28]	@ (8001298 <__NVIC_EnableIRQ+0x38>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	@ (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	@ (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	@ 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	@ 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f7ff ff8e 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff29 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013c4:	f7ff ff3e 	bl	8001244 <__NVIC_GetPriorityGrouping>
 80013c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff ff8e 	bl	80012f0 <NVIC_EncodePriority>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff5d 	bl	800129c <__NVIC_SetPriority>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff31 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ffa2 	bl	8001358 <SysTick_Config>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142e:	e166      	b.n	80016fe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	2101      	movs	r1, #1
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	4013      	ands	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8158 	beq.w	80016f8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b01      	cmp	r3, #1
 8001452:	d005      	beq.n	8001460 <HAL_GPIO_Init+0x40>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d130      	bne.n	80014c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001496:	2201      	movs	r2, #1
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	f003 0201 	and.w	r2, r3, #1
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d017      	beq.n	80014fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d123      	bne.n	8001552 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	08da      	lsrs	r2, r3, #3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3208      	adds	r2, #8
 8001512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	691a      	ldr	r2, [r3, #16]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	08da      	lsrs	r2, r3, #3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3208      	adds	r2, #8
 800154c:	6939      	ldr	r1, [r7, #16]
 800154e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	2203      	movs	r2, #3
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0203 	and.w	r2, r3, #3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 80b2 	beq.w	80016f8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001594:	4b61      	ldr	r3, [pc, #388]	@ (800171c <HAL_GPIO_Init+0x2fc>)
 8001596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001598:	4a60      	ldr	r2, [pc, #384]	@ (800171c <HAL_GPIO_Init+0x2fc>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6613      	str	r3, [r2, #96]	@ 0x60
 80015a0:	4b5e      	ldr	r3, [pc, #376]	@ (800171c <HAL_GPIO_Init+0x2fc>)
 80015a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015ac:	4a5c      	ldr	r2, [pc, #368]	@ (8001720 <HAL_GPIO_Init+0x300>)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	3302      	adds	r3, #2
 80015b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	220f      	movs	r2, #15
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015d6:	d02b      	beq.n	8001630 <HAL_GPIO_Init+0x210>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a52      	ldr	r2, [pc, #328]	@ (8001724 <HAL_GPIO_Init+0x304>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d025      	beq.n	800162c <HAL_GPIO_Init+0x20c>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a51      	ldr	r2, [pc, #324]	@ (8001728 <HAL_GPIO_Init+0x308>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d01f      	beq.n	8001628 <HAL_GPIO_Init+0x208>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a50      	ldr	r2, [pc, #320]	@ (800172c <HAL_GPIO_Init+0x30c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d019      	beq.n	8001624 <HAL_GPIO_Init+0x204>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a4f      	ldr	r2, [pc, #316]	@ (8001730 <HAL_GPIO_Init+0x310>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d013      	beq.n	8001620 <HAL_GPIO_Init+0x200>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a4e      	ldr	r2, [pc, #312]	@ (8001734 <HAL_GPIO_Init+0x314>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d00d      	beq.n	800161c <HAL_GPIO_Init+0x1fc>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a4d      	ldr	r2, [pc, #308]	@ (8001738 <HAL_GPIO_Init+0x318>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d007      	beq.n	8001618 <HAL_GPIO_Init+0x1f8>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a4c      	ldr	r2, [pc, #304]	@ (800173c <HAL_GPIO_Init+0x31c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d101      	bne.n	8001614 <HAL_GPIO_Init+0x1f4>
 8001610:	2307      	movs	r3, #7
 8001612:	e00e      	b.n	8001632 <HAL_GPIO_Init+0x212>
 8001614:	2308      	movs	r3, #8
 8001616:	e00c      	b.n	8001632 <HAL_GPIO_Init+0x212>
 8001618:	2306      	movs	r3, #6
 800161a:	e00a      	b.n	8001632 <HAL_GPIO_Init+0x212>
 800161c:	2305      	movs	r3, #5
 800161e:	e008      	b.n	8001632 <HAL_GPIO_Init+0x212>
 8001620:	2304      	movs	r3, #4
 8001622:	e006      	b.n	8001632 <HAL_GPIO_Init+0x212>
 8001624:	2303      	movs	r3, #3
 8001626:	e004      	b.n	8001632 <HAL_GPIO_Init+0x212>
 8001628:	2302      	movs	r3, #2
 800162a:	e002      	b.n	8001632 <HAL_GPIO_Init+0x212>
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <HAL_GPIO_Init+0x212>
 8001630:	2300      	movs	r3, #0
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	f002 0203 	and.w	r2, r2, #3
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	4093      	lsls	r3, r2
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001642:	4937      	ldr	r1, [pc, #220]	@ (8001720 <HAL_GPIO_Init+0x300>)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	3302      	adds	r3, #2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001650:	4b3b      	ldr	r3, [pc, #236]	@ (8001740 <HAL_GPIO_Init+0x320>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001674:	4a32      	ldr	r2, [pc, #200]	@ (8001740 <HAL_GPIO_Init+0x320>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800167a:	4b31      	ldr	r3, [pc, #196]	@ (8001740 <HAL_GPIO_Init+0x320>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800169e:	4a28      	ldr	r2, [pc, #160]	@ (8001740 <HAL_GPIO_Init+0x320>)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016a4:	4b26      	ldr	r3, [pc, #152]	@ (8001740 <HAL_GPIO_Init+0x320>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001740 <HAL_GPIO_Init+0x320>)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <HAL_GPIO_Init+0x320>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016f2:	4a13      	ldr	r2, [pc, #76]	@ (8001740 <HAL_GPIO_Init+0x320>)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	fa22 f303 	lsr.w	r3, r2, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	f47f ae91 	bne.w	8001430 <HAL_GPIO_Init+0x10>
  }
}
 800170e:	bf00      	nop
 8001710:	bf00      	nop
 8001712:	371c      	adds	r7, #28
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	40021000 	.word	0x40021000
 8001720:	40010000 	.word	0x40010000
 8001724:	48000400 	.word	0x48000400
 8001728:	48000800 	.word	0x48000800
 800172c:	48000c00 	.word	0x48000c00
 8001730:	48001000 	.word	0x48001000
 8001734:	48001400 	.word	0x48001400
 8001738:	48001800 	.word	0x48001800
 800173c:	48001c00 	.word	0x48001c00
 8001740:	40010400 	.word	0x40010400

08001744 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001752:	e0c9      	b.n	80018e8 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001754:	2201      	movs	r2, #1
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80bc 	beq.w	80018e2 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800176a:	4a66      	ldr	r2, [pc, #408]	@ (8001904 <HAL_GPIO_DeInit+0x1c0>)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	3302      	adds	r3, #2
 8001772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001776:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	220f      	movs	r2, #15
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	4013      	ands	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001792:	d02b      	beq.n	80017ec <HAL_GPIO_DeInit+0xa8>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a5c      	ldr	r2, [pc, #368]	@ (8001908 <HAL_GPIO_DeInit+0x1c4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d025      	beq.n	80017e8 <HAL_GPIO_DeInit+0xa4>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a5b      	ldr	r2, [pc, #364]	@ (800190c <HAL_GPIO_DeInit+0x1c8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d01f      	beq.n	80017e4 <HAL_GPIO_DeInit+0xa0>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a5a      	ldr	r2, [pc, #360]	@ (8001910 <HAL_GPIO_DeInit+0x1cc>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d019      	beq.n	80017e0 <HAL_GPIO_DeInit+0x9c>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a59      	ldr	r2, [pc, #356]	@ (8001914 <HAL_GPIO_DeInit+0x1d0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d013      	beq.n	80017dc <HAL_GPIO_DeInit+0x98>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a58      	ldr	r2, [pc, #352]	@ (8001918 <HAL_GPIO_DeInit+0x1d4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d00d      	beq.n	80017d8 <HAL_GPIO_DeInit+0x94>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a57      	ldr	r2, [pc, #348]	@ (800191c <HAL_GPIO_DeInit+0x1d8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d007      	beq.n	80017d4 <HAL_GPIO_DeInit+0x90>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a56      	ldr	r2, [pc, #344]	@ (8001920 <HAL_GPIO_DeInit+0x1dc>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d101      	bne.n	80017d0 <HAL_GPIO_DeInit+0x8c>
 80017cc:	2307      	movs	r3, #7
 80017ce:	e00e      	b.n	80017ee <HAL_GPIO_DeInit+0xaa>
 80017d0:	2308      	movs	r3, #8
 80017d2:	e00c      	b.n	80017ee <HAL_GPIO_DeInit+0xaa>
 80017d4:	2306      	movs	r3, #6
 80017d6:	e00a      	b.n	80017ee <HAL_GPIO_DeInit+0xaa>
 80017d8:	2305      	movs	r3, #5
 80017da:	e008      	b.n	80017ee <HAL_GPIO_DeInit+0xaa>
 80017dc:	2304      	movs	r3, #4
 80017de:	e006      	b.n	80017ee <HAL_GPIO_DeInit+0xaa>
 80017e0:	2303      	movs	r3, #3
 80017e2:	e004      	b.n	80017ee <HAL_GPIO_DeInit+0xaa>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e002      	b.n	80017ee <HAL_GPIO_DeInit+0xaa>
 80017e8:	2301      	movs	r3, #1
 80017ea:	e000      	b.n	80017ee <HAL_GPIO_DeInit+0xaa>
 80017ec:	2300      	movs	r3, #0
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	f002 0203 	and.w	r2, r2, #3
 80017f4:	0092      	lsls	r2, r2, #2
 80017f6:	4093      	lsls	r3, r2
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d132      	bne.n	8001864 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80017fe:	4b49      	ldr	r3, [pc, #292]	@ (8001924 <HAL_GPIO_DeInit+0x1e0>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	43db      	mvns	r3, r3
 8001806:	4947      	ldr	r1, [pc, #284]	@ (8001924 <HAL_GPIO_DeInit+0x1e0>)
 8001808:	4013      	ands	r3, r2
 800180a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800180c:	4b45      	ldr	r3, [pc, #276]	@ (8001924 <HAL_GPIO_DeInit+0x1e0>)
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	43db      	mvns	r3, r3
 8001814:	4943      	ldr	r1, [pc, #268]	@ (8001924 <HAL_GPIO_DeInit+0x1e0>)
 8001816:	4013      	ands	r3, r2
 8001818:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800181a:	4b42      	ldr	r3, [pc, #264]	@ (8001924 <HAL_GPIO_DeInit+0x1e0>)
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	43db      	mvns	r3, r3
 8001822:	4940      	ldr	r1, [pc, #256]	@ (8001924 <HAL_GPIO_DeInit+0x1e0>)
 8001824:	4013      	ands	r3, r2
 8001826:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001828:	4b3e      	ldr	r3, [pc, #248]	@ (8001924 <HAL_GPIO_DeInit+0x1e0>)
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	43db      	mvns	r3, r3
 8001830:	493c      	ldr	r1, [pc, #240]	@ (8001924 <HAL_GPIO_DeInit+0x1e0>)
 8001832:	4013      	ands	r3, r2
 8001834:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	220f      	movs	r2, #15
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001846:	4a2f      	ldr	r2, [pc, #188]	@ (8001904 <HAL_GPIO_DeInit+0x1c0>)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	089b      	lsrs	r3, r3, #2
 800184c:	3302      	adds	r3, #2
 800184e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	43da      	mvns	r2, r3
 8001856:	482b      	ldr	r0, [pc, #172]	@ (8001904 <HAL_GPIO_DeInit+0x1c0>)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	400a      	ands	r2, r1
 800185e:	3302      	adds	r3, #2
 8001860:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2103      	movs	r1, #3
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	08da      	lsrs	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3208      	adds	r2, #8
 8001880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	220f      	movs	r2, #15
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	08d2      	lsrs	r2, r2, #3
 8001898:	4019      	ands	r1, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3208      	adds	r2, #8
 800189e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2103      	movs	r1, #3
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	401a      	ands	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	2101      	movs	r1, #1
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	401a      	ands	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2103      	movs	r1, #3
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	401a      	ands	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f47f af2f 	bne.w	8001754 <HAL_GPIO_DeInit+0x10>
  }
}
 80018f6:	bf00      	nop
 80018f8:	bf00      	nop
 80018fa:	371c      	adds	r7, #28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40010000 	.word	0x40010000
 8001908:	48000400 	.word	0x48000400
 800190c:	48000800 	.word	0x48000800
 8001910:	48000c00 	.word	0x48000c00
 8001914:	48001000 	.word	0x48001000
 8001918:	48001400 	.word	0x48001400
 800191c:	48001800 	.word	0x48001800
 8001920:	48001c00 	.word	0x48001c00
 8001924:	40010400 	.word	0x40010400

08001928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e08d      	b.n	8001a56 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d106      	bne.n	8001954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff f926 	bl	8000ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2224      	movs	r2, #36	@ 0x24
 8001958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0201 	bic.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001978:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001988:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d107      	bne.n	80019a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	e006      	b.n	80019b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80019ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d108      	bne.n	80019ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	e007      	b.n	80019da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69d9      	ldr	r1, [r3, #28]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1a      	ldr	r2, [r3, #32]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2220      	movs	r2, #32
 8001a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e021      	b.n	8001ab4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2224      	movs	r2, #36	@ 0x24
 8001a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0201 	bic.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff f8e7 	bl	8000c5c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	4608      	mov	r0, r1
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4603      	mov	r3, r0
 8001acc:	817b      	strh	r3, [r7, #10]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	813b      	strh	r3, [r7, #8]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b20      	cmp	r3, #32
 8001ae0:	f040 80f9 	bne.w	8001cd6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <HAL_I2C_Mem_Write+0x34>
 8001aea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001af6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0ed      	b.n	8001cd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_I2C_Mem_Write+0x4e>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e0e6      	b.n	8001cd8 <HAL_I2C_Mem_Write+0x21c>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b12:	f7ff fb43 	bl	800119c <HAL_GetTick>
 8001b16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2319      	movs	r3, #25
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 fac3 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0d1      	b.n	8001cd8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2221      	movs	r2, #33	@ 0x21
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2240      	movs	r2, #64	@ 0x40
 8001b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6a3a      	ldr	r2, [r7, #32]
 8001b4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b5c:	88f8      	ldrh	r0, [r7, #6]
 8001b5e:	893a      	ldrh	r2, [r7, #8]
 8001b60:	8979      	ldrh	r1, [r7, #10]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f9d3 	bl	8001f18 <I2C_RequestMemoryWrite>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0a9      	b.n	8001cd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2bff      	cmp	r3, #255	@ 0xff
 8001b8c:	d90e      	bls.n	8001bac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	22ff      	movs	r2, #255	@ 0xff
 8001b92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	8979      	ldrh	r1, [r7, #10]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 fc47 	bl	8002438 <I2C_TransferConfig>
 8001baa:	e00f      	b.n	8001bcc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	8979      	ldrh	r1, [r7, #10]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 fc36 	bl	8002438 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 fac6 	bl	8002162 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e07b      	b.n	8001cd8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be4:	781a      	ldrb	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d034      	beq.n	8001c84 <HAL_I2C_Mem_Write+0x1c8>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d130      	bne.n	8001c84 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2180      	movs	r1, #128	@ 0x80
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 fa3f 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e04d      	b.n	8001cd8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	2bff      	cmp	r3, #255	@ 0xff
 8001c44:	d90e      	bls.n	8001c64 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	22ff      	movs	r2, #255	@ 0xff
 8001c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	8979      	ldrh	r1, [r7, #10]
 8001c54:	2300      	movs	r3, #0
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 fbeb 	bl	8002438 <I2C_TransferConfig>
 8001c62:	e00f      	b.n	8001c84 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	8979      	ldrh	r1, [r7, #10]
 8001c76:	2300      	movs	r3, #0
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 fbda 	bl	8002438 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d19e      	bne.n	8001bcc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 faac 	bl	80021f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e01a      	b.n	8001cd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <HAL_I2C_Mem_Write+0x224>)
 8001cb6:	400b      	ands	r3, r1
 8001cb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e000      	b.n	8001cd8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001cd6:	2302      	movs	r3, #2
  }
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	fe00e800 	.word	0xfe00e800

08001ce4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	4608      	mov	r0, r1
 8001cee:	4611      	mov	r1, r2
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	817b      	strh	r3, [r7, #10]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	813b      	strh	r3, [r7, #8]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b20      	cmp	r3, #32
 8001d08:	f040 80fd 	bne.w	8001f06 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <HAL_I2C_Mem_Read+0x34>
 8001d12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d105      	bne.n	8001d24 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d1e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0f1      	b.n	8001f08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_I2C_Mem_Read+0x4e>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e0ea      	b.n	8001f08 <HAL_I2C_Mem_Read+0x224>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d3a:	f7ff fa2f 	bl	800119c <HAL_GetTick>
 8001d3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	2319      	movs	r3, #25
 8001d46:	2201      	movs	r2, #1
 8001d48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f9af 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0d5      	b.n	8001f08 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2222      	movs	r2, #34	@ 0x22
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2240      	movs	r2, #64	@ 0x40
 8001d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a3a      	ldr	r2, [r7, #32]
 8001d76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d84:	88f8      	ldrh	r0, [r7, #6]
 8001d86:	893a      	ldrh	r2, [r7, #8]
 8001d88:	8979      	ldrh	r1, [r7, #10]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	4603      	mov	r3, r0
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 f913 	bl	8001fc0 <I2C_RequestMemoryRead>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0ad      	b.n	8001f08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	2bff      	cmp	r3, #255	@ 0xff
 8001db4:	d90e      	bls.n	8001dd4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2201      	movs	r2, #1
 8001dba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	8979      	ldrh	r1, [r7, #10]
 8001dc4:	4b52      	ldr	r3, [pc, #328]	@ (8001f10 <HAL_I2C_Mem_Read+0x22c>)
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 fb33 	bl	8002438 <I2C_TransferConfig>
 8001dd2:	e00f      	b.n	8001df4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	8979      	ldrh	r1, [r7, #10]
 8001de6:	4b4a      	ldr	r3, [pc, #296]	@ (8001f10 <HAL_I2C_Mem_Read+0x22c>)
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 fb22 	bl	8002438 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f956 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e07c      	b.n	8001f08 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e20:	1c5a      	adds	r2, r3, #1
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d034      	beq.n	8001eb4 <HAL_I2C_Mem_Read+0x1d0>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d130      	bne.n	8001eb4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2180      	movs	r1, #128	@ 0x80
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 f927 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e04d      	b.n	8001f08 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2bff      	cmp	r3, #255	@ 0xff
 8001e74:	d90e      	bls.n	8001e94 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	8979      	ldrh	r1, [r7, #10]
 8001e84:	2300      	movs	r3, #0
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 fad3 	bl	8002438 <I2C_TransferConfig>
 8001e92:	e00f      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	8979      	ldrh	r1, [r7, #10]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 fac2 	bl	8002438 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d19a      	bne.n	8001df4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 f994 	bl	80021f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e01a      	b.n	8001f08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <HAL_I2C_Mem_Read+0x230>)
 8001ee6:	400b      	ands	r3, r1
 8001ee8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001f06:	2302      	movs	r3, #2
  }
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	80002400 	.word	0x80002400
 8001f14:	fe00e800 	.word	0xfe00e800

08001f18 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	4608      	mov	r0, r1
 8001f22:	4611      	mov	r1, r2
 8001f24:	461a      	mov	r2, r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	817b      	strh	r3, [r7, #10]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	813b      	strh	r3, [r7, #8]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	8979      	ldrh	r1, [r7, #10]
 8001f38:	4b20      	ldr	r3, [pc, #128]	@ (8001fbc <I2C_RequestMemoryWrite+0xa4>)
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 fa79 	bl	8002438 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	69b9      	ldr	r1, [r7, #24]
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 f909 	bl	8002162 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e02c      	b.n	8001fb4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d105      	bne.n	8001f6c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f60:	893b      	ldrh	r3, [r7, #8]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f6a:	e015      	b.n	8001f98 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f6c:	893b      	ldrh	r3, [r7, #8]
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	69b9      	ldr	r1, [r7, #24]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 f8ef 	bl	8002162 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e012      	b.n	8001fb4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f8e:	893b      	ldrh	r3, [r7, #8]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2180      	movs	r1, #128	@ 0x80
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f884 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	80002000 	.word	0x80002000

08001fc0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	4608      	mov	r0, r1
 8001fca:	4611      	mov	r1, r2
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4603      	mov	r3, r0
 8001fd0:	817b      	strh	r3, [r7, #10]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	813b      	strh	r3, [r7, #8]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	8979      	ldrh	r1, [r7, #10]
 8001fe0:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <I2C_RequestMemoryRead+0xa4>)
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 fa26 	bl	8002438 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	69b9      	ldr	r1, [r7, #24]
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 f8b6 	bl	8002162 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e02c      	b.n	800205a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d105      	bne.n	8002012 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002006:	893b      	ldrh	r3, [r7, #8]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002010:	e015      	b.n	800203e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002012:	893b      	ldrh	r3, [r7, #8]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	b29b      	uxth	r3, r3
 8002018:	b2da      	uxtb	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	69b9      	ldr	r1, [r7, #24]
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 f89c 	bl	8002162 <I2C_WaitOnTXISFlagUntilTimeout>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e012      	b.n	800205a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002034:	893b      	ldrh	r3, [r7, #8]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	2200      	movs	r2, #0
 8002046:	2140      	movs	r1, #64	@ 0x40
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 f831 	bl	80020b0 <I2C_WaitOnFlagUntilTimeout>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	80002000 	.word	0x80002000

08002068 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b02      	cmp	r3, #2
 800207c:	d103      	bne.n	8002086 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2200      	movs	r2, #0
 8002084:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d007      	beq.n	80020a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0201 	orr.w	r2, r2, #1
 80020a2:	619a      	str	r2, [r3, #24]
  }
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020c0:	e03b      	b.n	800213a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	6839      	ldr	r1, [r7, #0]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f8d6 	bl	8002278 <I2C_IsErrorOccurred>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e041      	b.n	800215a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020dc:	d02d      	beq.n	800213a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020de:	f7ff f85d 	bl	800119c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d302      	bcc.n	80020f4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d122      	bne.n	800213a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699a      	ldr	r2, [r3, #24]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4013      	ands	r3, r2
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	429a      	cmp	r2, r3
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	429a      	cmp	r2, r3
 8002110:	d113      	bne.n	800213a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	f043 0220 	orr.w	r2, r3, #32
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2220      	movs	r2, #32
 8002122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e00f      	b.n	800215a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699a      	ldr	r2, [r3, #24]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4013      	ands	r3, r2
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	429a      	cmp	r2, r3
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	429a      	cmp	r2, r3
 8002156:	d0b4      	beq.n	80020c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800216e:	e033      	b.n	80021d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f87f 	bl	8002278 <I2C_IsErrorOccurred>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e031      	b.n	80021e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218a:	d025      	beq.n	80021d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218c:	f7ff f806 	bl	800119c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	429a      	cmp	r2, r3
 800219a:	d302      	bcc.n	80021a2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d11a      	bne.n	80021d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d013      	beq.n	80021d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b4:	f043 0220 	orr.w	r2, r3, #32
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e007      	b.n	80021e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d1c4      	bne.n	8002170 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021fc:	e02f      	b.n	800225e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f838 	bl	8002278 <I2C_IsErrorOccurred>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e02d      	b.n	800226e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002212:	f7fe ffc3 	bl	800119c <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	429a      	cmp	r2, r3
 8002220:	d302      	bcc.n	8002228 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d11a      	bne.n	800225e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	2b20      	cmp	r3, #32
 8002234:	d013      	beq.n	800225e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223a:	f043 0220 	orr.w	r2, r3, #32
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e007      	b.n	800226e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b20      	cmp	r3, #32
 800226a:	d1c8      	bne.n	80021fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	@ 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	f003 0310 	and.w	r3, r3, #16
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d068      	beq.n	8002376 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2210      	movs	r2, #16
 80022aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022ac:	e049      	b.n	8002342 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d045      	beq.n	8002342 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022b6:	f7fe ff71 	bl	800119c <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d302      	bcc.n	80022cc <I2C_IsErrorOccurred+0x54>
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d13a      	bne.n	8002342 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022ee:	d121      	bne.n	8002334 <I2C_IsErrorOccurred+0xbc>
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022f6:	d01d      	beq.n	8002334 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80022f8:	7cfb      	ldrb	r3, [r7, #19]
 80022fa:	2b20      	cmp	r3, #32
 80022fc:	d01a      	beq.n	8002334 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800230c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800230e:	f7fe ff45 	bl	800119c <HAL_GetTick>
 8002312:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002314:	e00e      	b.n	8002334 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002316:	f7fe ff41 	bl	800119c <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b19      	cmp	r3, #25
 8002322:	d907      	bls.n	8002334 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	f043 0320 	orr.w	r3, r3, #32
 800232a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002332:	e006      	b.n	8002342 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	2b20      	cmp	r3, #32
 8002340:	d1e9      	bne.n	8002316 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b20      	cmp	r3, #32
 800234e:	d003      	beq.n	8002358 <I2C_IsErrorOccurred+0xe0>
 8002350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0aa      	beq.n	80022ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800235c:	2b00      	cmp	r3, #0
 800235e:	d103      	bne.n	8002368 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2220      	movs	r2, #32
 8002366:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	f043 0304 	orr.w	r3, r3, #4
 800236e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00b      	beq.n	80023a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002398:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	f043 0308 	orr.w	r3, r3, #8
 80023b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00b      	beq.n	80023e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	f043 0302 	orr.w	r3, r3, #2
 80023d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80023e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01c      	beq.n	8002426 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f7ff fe3b 	bl	8002068 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002434 <I2C_IsErrorOccurred+0x1bc>)
 80023fe:	400b      	ands	r3, r1
 8002400:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	431a      	orrs	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002426:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800242a:	4618      	mov	r0, r3
 800242c:	3728      	adds	r7, #40	@ 0x28
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	fe00e800 	.word	0xfe00e800

08002438 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	607b      	str	r3, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	817b      	strh	r3, [r7, #10]
 8002446:	4613      	mov	r3, r2
 8002448:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800244a:	897b      	ldrh	r3, [r7, #10]
 800244c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002450:	7a7b      	ldrb	r3, [r7, #9]
 8002452:	041b      	lsls	r3, r3, #16
 8002454:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002458:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	4313      	orrs	r3, r2
 8002462:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002466:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	0d5b      	lsrs	r3, r3, #21
 8002472:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002476:	4b08      	ldr	r3, [pc, #32]	@ (8002498 <I2C_TransferConfig+0x60>)
 8002478:	430b      	orrs	r3, r1
 800247a:	43db      	mvns	r3, r3
 800247c:	ea02 0103 	and.w	r1, r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	430a      	orrs	r2, r1
 8002488:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800248a:	bf00      	nop
 800248c:	371c      	adds	r7, #28
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	03ff63ff 	.word	0x03ff63ff

0800249c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d138      	bne.n	8002524 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024bc:	2302      	movs	r3, #2
 80024be:	e032      	b.n	8002526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2224      	movs	r2, #36	@ 0x24
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0201 	bic.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6819      	ldr	r1, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	e000      	b.n	8002526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002524:	2302      	movs	r3, #2
  }
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002532:	b480      	push	{r7}
 8002534:	b085      	sub	sp, #20
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b20      	cmp	r3, #32
 8002546:	d139      	bne.n	80025bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002552:	2302      	movs	r3, #2
 8002554:	e033      	b.n	80025be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2224      	movs	r2, #36	@ 0x24
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002584:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	e000      	b.n	80025be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025bc:	2302      	movs	r3, #2
  }
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <HAL_PWREx_GetVoltageRange+0x3c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025dc:	d102      	bne.n	80025e4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80025de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025e2:	e00b      	b.n	80025fc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80025e4:	4b08      	ldr	r3, [pc, #32]	@ (8002608 <HAL_PWREx_GetVoltageRange+0x3c>)
 80025e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025f2:	d102      	bne.n	80025fa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80025f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025f8:	e000      	b.n	80025fc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80025fa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40007000 	.word	0x40007000

0800260c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d141      	bne.n	800269e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800261a:	4b4b      	ldr	r3, [pc, #300]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002626:	d131      	bne.n	800268c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002628:	4b47      	ldr	r3, [pc, #284]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800262a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800262e:	4a46      	ldr	r2, [pc, #280]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002634:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002638:	4b43      	ldr	r3, [pc, #268]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002640:	4a41      	ldr	r2, [pc, #260]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002642:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002646:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002648:	4b40      	ldr	r3, [pc, #256]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2232      	movs	r2, #50	@ 0x32
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	4a3f      	ldr	r2, [pc, #252]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	0c9b      	lsrs	r3, r3, #18
 800265a:	3301      	adds	r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800265e:	e002      	b.n	8002666 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	3b01      	subs	r3, #1
 8002664:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002666:	4b38      	ldr	r3, [pc, #224]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800266e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002672:	d102      	bne.n	800267a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f2      	bne.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800267a:	4b33      	ldr	r3, [pc, #204]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002686:	d158      	bne.n	800273a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e057      	b.n	800273c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800268c:	4b2e      	ldr	r3, [pc, #184]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800268e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002692:	4a2d      	ldr	r2, [pc, #180]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002698:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800269c:	e04d      	b.n	800273a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026a4:	d141      	bne.n	800272a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026a6:	4b28      	ldr	r3, [pc, #160]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026b2:	d131      	bne.n	8002718 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026b4:	4b24      	ldr	r3, [pc, #144]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026ba:	4a23      	ldr	r2, [pc, #140]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026c4:	4b20      	ldr	r3, [pc, #128]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026cc:	4a1e      	ldr	r2, [pc, #120]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80026d4:	4b1d      	ldr	r3, [pc, #116]	@ (800274c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2232      	movs	r2, #50	@ 0x32
 80026da:	fb02 f303 	mul.w	r3, r2, r3
 80026de:	4a1c      	ldr	r2, [pc, #112]	@ (8002750 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	0c9b      	lsrs	r3, r3, #18
 80026e6:	3301      	adds	r3, #1
 80026e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026ea:	e002      	b.n	80026f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026f2:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026fe:	d102      	bne.n	8002706 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f2      	bne.n	80026ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002706:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800270e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002712:	d112      	bne.n	800273a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e011      	b.n	800273c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002718:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800271a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800271e:	4a0a      	ldr	r2, [pc, #40]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002724:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002728:	e007      	b.n	800273a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800272a:	4b07      	ldr	r3, [pc, #28]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002732:	4a05      	ldr	r2, [pc, #20]	@ (8002748 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002734:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002738:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	40007000 	.word	0x40007000
 800274c:	20000000 	.word	0x20000000
 8002750:	431bde83 	.word	0x431bde83

08002754 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d102      	bne.n	8002768 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	f000 bc08 	b.w	8002f78 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002768:	4b96      	ldr	r3, [pc, #600]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002772:	4b94      	ldr	r3, [pc, #592]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80e4 	beq.w	8002952 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <HAL_RCC_OscConfig+0x4c>
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b0c      	cmp	r3, #12
 8002794:	f040 808b 	bne.w	80028ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2b01      	cmp	r3, #1
 800279c:	f040 8087 	bne.w	80028ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027a0:	4b88      	ldr	r3, [pc, #544]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_OscConfig+0x64>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e3df      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1a      	ldr	r2, [r3, #32]
 80027bc:	4b81      	ldr	r3, [pc, #516]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d004      	beq.n	80027d2 <HAL_RCC_OscConfig+0x7e>
 80027c8:	4b7e      	ldr	r3, [pc, #504]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027d0:	e005      	b.n	80027de <HAL_RCC_OscConfig+0x8a>
 80027d2:	4b7c      	ldr	r3, [pc, #496]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80027d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027de:	4293      	cmp	r3, r2
 80027e0:	d223      	bcs.n	800282a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fdcc 	bl	8003384 <RCC_SetFlashLatencyFromMSIRange>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e3c0      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027f6:	4b73      	ldr	r3, [pc, #460]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a72      	ldr	r2, [pc, #456]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80027fc:	f043 0308 	orr.w	r3, r3, #8
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	4b70      	ldr	r3, [pc, #448]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	496d      	ldr	r1, [pc, #436]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002810:	4313      	orrs	r3, r2
 8002812:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002814:	4b6b      	ldr	r3, [pc, #428]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	4968      	ldr	r1, [pc, #416]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
 8002828:	e025      	b.n	8002876 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800282a:	4b66      	ldr	r3, [pc, #408]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a65      	ldr	r2, [pc, #404]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002830:	f043 0308 	orr.w	r3, r3, #8
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	4b63      	ldr	r3, [pc, #396]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4960      	ldr	r1, [pc, #384]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002844:	4313      	orrs	r3, r2
 8002846:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002848:	4b5e      	ldr	r3, [pc, #376]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	495b      	ldr	r1, [pc, #364]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fd8c 	bl	8003384 <RCC_SetFlashLatencyFromMSIRange>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e380      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002876:	f000 fcc1 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 800287a:	4602      	mov	r2, r0
 800287c:	4b51      	ldr	r3, [pc, #324]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	4950      	ldr	r1, [pc, #320]	@ (80029c8 <HAL_RCC_OscConfig+0x274>)
 8002888:	5ccb      	ldrb	r3, [r1, r3]
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	fa22 f303 	lsr.w	r3, r2, r3
 8002892:	4a4e      	ldr	r2, [pc, #312]	@ (80029cc <HAL_RCC_OscConfig+0x278>)
 8002894:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002896:	4b4e      	ldr	r3, [pc, #312]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fc2e 	bl	80010fc <HAL_InitTick>
 80028a0:	4603      	mov	r3, r0
 80028a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d052      	beq.n	8002950 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	e364      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d032      	beq.n	800291c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028b6:	4b43      	ldr	r3, [pc, #268]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a42      	ldr	r2, [pc, #264]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028c2:	f7fe fc6b 	bl	800119c <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028ca:	f7fe fc67 	bl	800119c <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e34d      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028dc:	4b39      	ldr	r3, [pc, #228]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f0      	beq.n	80028ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028e8:	4b36      	ldr	r3, [pc, #216]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a35      	ldr	r2, [pc, #212]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80028ee:	f043 0308 	orr.w	r3, r3, #8
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	4b33      	ldr	r3, [pc, #204]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	4930      	ldr	r1, [pc, #192]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002906:	4b2f      	ldr	r3, [pc, #188]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	492b      	ldr	r1, [pc, #172]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002916:	4313      	orrs	r3, r2
 8002918:	604b      	str	r3, [r1, #4]
 800291a:	e01a      	b.n	8002952 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800291c:	4b29      	ldr	r3, [pc, #164]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a28      	ldr	r2, [pc, #160]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002922:	f023 0301 	bic.w	r3, r3, #1
 8002926:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002928:	f7fe fc38 	bl	800119c <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002930:	f7fe fc34 	bl	800119c <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e31a      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002942:	4b20      	ldr	r3, [pc, #128]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x1dc>
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002950:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d073      	beq.n	8002a46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	2b08      	cmp	r3, #8
 8002962:	d005      	beq.n	8002970 <HAL_RCC_OscConfig+0x21c>
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	2b0c      	cmp	r3, #12
 8002968:	d10e      	bne.n	8002988 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d10b      	bne.n	8002988 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	4b14      	ldr	r3, [pc, #80]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d063      	beq.n	8002a44 <HAL_RCC_OscConfig+0x2f0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d15f      	bne.n	8002a44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e2f7      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002990:	d106      	bne.n	80029a0 <HAL_RCC_OscConfig+0x24c>
 8002992:	4b0c      	ldr	r3, [pc, #48]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a0b      	ldr	r2, [pc, #44]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e025      	b.n	80029ec <HAL_RCC_OscConfig+0x298>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029a8:	d114      	bne.n	80029d4 <HAL_RCC_OscConfig+0x280>
 80029aa:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a05      	ldr	r2, [pc, #20]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80029b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b03      	ldr	r3, [pc, #12]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a02      	ldr	r2, [pc, #8]	@ (80029c4 <HAL_RCC_OscConfig+0x270>)
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e013      	b.n	80029ec <HAL_RCC_OscConfig+0x298>
 80029c4:	40021000 	.word	0x40021000
 80029c8:	080056a8 	.word	0x080056a8
 80029cc:	20000000 	.word	0x20000000
 80029d0:	20000038 	.word	0x20000038
 80029d4:	4ba0      	ldr	r3, [pc, #640]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a9f      	ldr	r2, [pc, #636]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 80029da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	4b9d      	ldr	r3, [pc, #628]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a9c      	ldr	r2, [pc, #624]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 80029e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d013      	beq.n	8002a1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe fbd2 	bl	800119c <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029fc:	f7fe fbce 	bl	800119c <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	@ 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e2b4      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a0e:	4b92      	ldr	r3, [pc, #584]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x2a8>
 8002a1a:	e014      	b.n	8002a46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fbbe 	bl	800119c <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a24:	f7fe fbba 	bl	800119c <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b64      	cmp	r3, #100	@ 0x64
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e2a0      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a36:	4b88      	ldr	r3, [pc, #544]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x2d0>
 8002a42:	e000      	b.n	8002a46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d060      	beq.n	8002b14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_OscConfig+0x310>
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b0c      	cmp	r3, #12
 8002a5c:	d119      	bne.n	8002a92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d116      	bne.n	8002a92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a64:	4b7c      	ldr	r3, [pc, #496]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_OscConfig+0x328>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e27d      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7c:	4b76      	ldr	r3, [pc, #472]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	061b      	lsls	r3, r3, #24
 8002a8a:	4973      	ldr	r1, [pc, #460]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a90:	e040      	b.n	8002b14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d023      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a9a:	4b6f      	ldr	r3, [pc, #444]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a6e      	ldr	r2, [pc, #440]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa6:	f7fe fb79 	bl	800119c <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aae:	f7fe fb75 	bl	800119c <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e25b      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac0:	4b65      	ldr	r3, [pc, #404]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002acc:	4b62      	ldr	r3, [pc, #392]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	061b      	lsls	r3, r3, #24
 8002ada:	495f      	ldr	r1, [pc, #380]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]
 8002ae0:	e018      	b.n	8002b14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aee:	f7fe fb55 	bl	800119c <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af6:	f7fe fb51 	bl	800119c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e237      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b08:	4b53      	ldr	r3, [pc, #332]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f0      	bne.n	8002af6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d03c      	beq.n	8002b9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01c      	beq.n	8002b62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b28:	4b4b      	ldr	r3, [pc, #300]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b2e:	4a4a      	ldr	r2, [pc, #296]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b38:	f7fe fb30 	bl	800119c <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b40:	f7fe fb2c 	bl	800119c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e212      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b52:	4b41      	ldr	r3, [pc, #260]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0ef      	beq.n	8002b40 <HAL_RCC_OscConfig+0x3ec>
 8002b60:	e01b      	b.n	8002b9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b62:	4b3d      	ldr	r3, [pc, #244]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b68:	4a3b      	ldr	r2, [pc, #236]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002b6a:	f023 0301 	bic.w	r3, r3, #1
 8002b6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b72:	f7fe fb13 	bl	800119c <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b7a:	f7fe fb0f 	bl	800119c <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e1f5      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b8c:	4b32      	ldr	r3, [pc, #200]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1ef      	bne.n	8002b7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80a6 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bac:	4b2a      	ldr	r3, [pc, #168]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10d      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb8:	4b27      	ldr	r3, [pc, #156]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbc:	4a26      	ldr	r2, [pc, #152]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bc4:	4b24      	ldr	r3, [pc, #144]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd4:	4b21      	ldr	r3, [pc, #132]	@ (8002c5c <HAL_RCC_OscConfig+0x508>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d118      	bne.n	8002c12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002be0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c5c <HAL_RCC_OscConfig+0x508>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c5c <HAL_RCC_OscConfig+0x508>)
 8002be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bec:	f7fe fad6 	bl	800119c <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf4:	f7fe fad2 	bl	800119c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e1b8      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c06:	4b15      	ldr	r3, [pc, #84]	@ (8002c5c <HAL_RCC_OscConfig+0x508>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d108      	bne.n	8002c2c <HAL_RCC_OscConfig+0x4d8>
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c20:	4a0d      	ldr	r2, [pc, #52]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c2a:	e029      	b.n	8002c80 <HAL_RCC_OscConfig+0x52c>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b05      	cmp	r3, #5
 8002c32:	d115      	bne.n	8002c60 <HAL_RCC_OscConfig+0x50c>
 8002c34:	4b08      	ldr	r3, [pc, #32]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c3a:	4a07      	ldr	r2, [pc, #28]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002c3c:	f043 0304 	orr.w	r3, r3, #4
 8002c40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c44:	4b04      	ldr	r3, [pc, #16]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c4a:	4a03      	ldr	r2, [pc, #12]	@ (8002c58 <HAL_RCC_OscConfig+0x504>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c54:	e014      	b.n	8002c80 <HAL_RCC_OscConfig+0x52c>
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40007000 	.word	0x40007000
 8002c60:	4b9d      	ldr	r3, [pc, #628]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c66:	4a9c      	ldr	r2, [pc, #624]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c70:	4b99      	ldr	r3, [pc, #612]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c76:	4a98      	ldr	r2, [pc, #608]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002c78:	f023 0304 	bic.w	r3, r3, #4
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d016      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c88:	f7fe fa88 	bl	800119c <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c90:	f7fe fa84 	bl	800119c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e168      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca6:	4b8c      	ldr	r3, [pc, #560]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ed      	beq.n	8002c90 <HAL_RCC_OscConfig+0x53c>
 8002cb4:	e015      	b.n	8002ce2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7fe fa71 	bl	800119c <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7fe fa6d 	bl	800119c <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e151      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cd4:	4b80      	ldr	r3, [pc, #512]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1ed      	bne.n	8002cbe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ce2:	7ffb      	ldrb	r3, [r7, #31]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d105      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cec:	4a7a      	ldr	r2, [pc, #488]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d03c      	beq.n	8002d7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01c      	beq.n	8002d42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d08:	4b73      	ldr	r3, [pc, #460]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d0e:	4a72      	ldr	r2, [pc, #456]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d18:	f7fe fa40 	bl	800119c <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d20:	f7fe fa3c 	bl	800119c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e122      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d32:	4b69      	ldr	r3, [pc, #420]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0ef      	beq.n	8002d20 <HAL_RCC_OscConfig+0x5cc>
 8002d40:	e01b      	b.n	8002d7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d42:	4b65      	ldr	r3, [pc, #404]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d48:	4a63      	ldr	r2, [pc, #396]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d52:	f7fe fa23 	bl	800119c <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d5a:	f7fe fa1f 	bl	800119c <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e105      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d6c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1ef      	bne.n	8002d5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80f9 	beq.w	8002f76 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	f040 80cf 	bne.w	8002f2c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d8e:	4b52      	ldr	r3, [pc, #328]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f003 0203 	and.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d12c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dac:	3b01      	subs	r3, #1
 8002dae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d123      	bne.n	8002dfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dbe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d11b      	bne.n	8002dfc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d113      	bne.n	8002dfc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dde:	085b      	lsrs	r3, r3, #1
 8002de0:	3b01      	subs	r3, #1
 8002de2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d109      	bne.n	8002dfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	085b      	lsrs	r3, r3, #1
 8002df4:	3b01      	subs	r3, #1
 8002df6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d071      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b0c      	cmp	r3, #12
 8002e00:	d068      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e02:	4b35      	ldr	r3, [pc, #212]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d105      	bne.n	8002e1a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e0e:	4b32      	ldr	r3, [pc, #200]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0ac      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a2d      	ldr	r2, [pc, #180]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002e24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e2a:	f7fe f9b7 	bl	800119c <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e32:	f7fe f9b3 	bl	800119c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e099      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e44:	4b24      	ldr	r3, [pc, #144]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f0      	bne.n	8002e32 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e50:	4b21      	ldr	r3, [pc, #132]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	4b21      	ldr	r3, [pc, #132]	@ (8002edc <HAL_RCC_OscConfig+0x788>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e60:	3a01      	subs	r2, #1
 8002e62:	0112      	lsls	r2, r2, #4
 8002e64:	4311      	orrs	r1, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e6a:	0212      	lsls	r2, r2, #8
 8002e6c:	4311      	orrs	r1, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e72:	0852      	lsrs	r2, r2, #1
 8002e74:	3a01      	subs	r2, #1
 8002e76:	0552      	lsls	r2, r2, #21
 8002e78:	4311      	orrs	r1, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e7e:	0852      	lsrs	r2, r2, #1
 8002e80:	3a01      	subs	r2, #1
 8002e82:	0652      	lsls	r2, r2, #25
 8002e84:	4311      	orrs	r1, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e8a:	06d2      	lsls	r2, r2, #27
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	4912      	ldr	r1, [pc, #72]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e94:	4b10      	ldr	r3, [pc, #64]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a0f      	ldr	r2, [pc, #60]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002e9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4a0c      	ldr	r2, [pc, #48]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002ea6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eaa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002eac:	f7fe f976 	bl	800119c <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fe f972 	bl	800119c <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e058      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec6:	4b04      	ldr	r3, [pc, #16]	@ (8002ed8 <HAL_RCC_OscConfig+0x784>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ed2:	e050      	b.n	8002f76 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e04f      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee0:	4b27      	ldr	r3, [pc, #156]	@ (8002f80 <HAL_RCC_OscConfig+0x82c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d144      	bne.n	8002f76 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002eec:	4b24      	ldr	r3, [pc, #144]	@ (8002f80 <HAL_RCC_OscConfig+0x82c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a23      	ldr	r2, [pc, #140]	@ (8002f80 <HAL_RCC_OscConfig+0x82c>)
 8002ef2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ef6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ef8:	4b21      	ldr	r3, [pc, #132]	@ (8002f80 <HAL_RCC_OscConfig+0x82c>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4a20      	ldr	r2, [pc, #128]	@ (8002f80 <HAL_RCC_OscConfig+0x82c>)
 8002efe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f04:	f7fe f94a 	bl	800119c <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7fe f946 	bl	800119c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e02c      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1e:	4b18      	ldr	r3, [pc, #96]	@ (8002f80 <HAL_RCC_OscConfig+0x82c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x7b8>
 8002f2a:	e024      	b.n	8002f76 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	d01f      	beq.n	8002f72 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f32:	4b13      	ldr	r3, [pc, #76]	@ (8002f80 <HAL_RCC_OscConfig+0x82c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a12      	ldr	r2, [pc, #72]	@ (8002f80 <HAL_RCC_OscConfig+0x82c>)
 8002f38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3e:	f7fe f92d 	bl	800119c <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f46:	f7fe f929 	bl	800119c <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e00f      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f58:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <HAL_RCC_OscConfig+0x82c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1f0      	bne.n	8002f46 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f64:	4b06      	ldr	r3, [pc, #24]	@ (8002f80 <HAL_RCC_OscConfig+0x82c>)
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	4905      	ldr	r1, [pc, #20]	@ (8002f80 <HAL_RCC_OscConfig+0x82c>)
 8002f6a:	4b06      	ldr	r3, [pc, #24]	@ (8002f84 <HAL_RCC_OscConfig+0x830>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60cb      	str	r3, [r1, #12]
 8002f70:	e001      	b.n	8002f76 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3720      	adds	r7, #32
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40021000 	.word	0x40021000
 8002f84:	feeefffc 	.word	0xfeeefffc

08002f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e11d      	b.n	80031dc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b90      	ldr	r3, [pc, #576]	@ (80031e4 <HAL_RCC_ClockConfig+0x25c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d910      	bls.n	8002fd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b8d      	ldr	r3, [pc, #564]	@ (80031e4 <HAL_RCC_ClockConfig+0x25c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 020f 	bic.w	r2, r3, #15
 8002fb6:	498b      	ldr	r1, [pc, #556]	@ (80031e4 <HAL_RCC_ClockConfig+0x25c>)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	4b89      	ldr	r3, [pc, #548]	@ (80031e4 <HAL_RCC_ClockConfig+0x25c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e105      	b.n	80031dc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d010      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	4b81      	ldr	r3, [pc, #516]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d908      	bls.n	8002ffe <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fec:	4b7e      	ldr	r3, [pc, #504]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	497b      	ldr	r1, [pc, #492]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d079      	beq.n	80030fe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b03      	cmp	r3, #3
 8003010:	d11e      	bne.n	8003050 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003012:	4b75      	ldr	r3, [pc, #468]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e0dc      	b.n	80031dc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003022:	f000 fa09 	bl	8003438 <RCC_GetSysClockFreqFromPLLSource>
 8003026:	4603      	mov	r3, r0
 8003028:	4a70      	ldr	r2, [pc, #448]	@ (80031ec <HAL_RCC_ClockConfig+0x264>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d946      	bls.n	80030bc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800302e:	4b6e      	ldr	r3, [pc, #440]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d140      	bne.n	80030bc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800303a:	4b6b      	ldr	r3, [pc, #428]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003042:	4a69      	ldr	r2, [pc, #420]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8003044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003048:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800304a:	2380      	movs	r3, #128	@ 0x80
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	e035      	b.n	80030bc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b02      	cmp	r3, #2
 8003056:	d107      	bne.n	8003068 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003058:	4b63      	ldr	r3, [pc, #396]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d115      	bne.n	8003090 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0b9      	b.n	80031dc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d107      	bne.n	8003080 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003070:	4b5d      	ldr	r3, [pc, #372]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d109      	bne.n	8003090 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0ad      	b.n	80031dc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003080:	4b59      	ldr	r3, [pc, #356]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0a5      	b.n	80031dc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003090:	f000 f8b4 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 8003094:	4603      	mov	r3, r0
 8003096:	4a55      	ldr	r2, [pc, #340]	@ (80031ec <HAL_RCC_ClockConfig+0x264>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d90f      	bls.n	80030bc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800309c:	4b52      	ldr	r3, [pc, #328]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030a8:	4b4f      	ldr	r3, [pc, #316]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030b0:	4a4d      	ldr	r2, [pc, #308]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 80030b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030b6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030b8:	2380      	movs	r3, #128	@ 0x80
 80030ba:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030bc:	4b4a      	ldr	r3, [pc, #296]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f023 0203 	bic.w	r2, r3, #3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4947      	ldr	r1, [pc, #284]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ce:	f7fe f865 	bl	800119c <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d4:	e00a      	b.n	80030ec <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d6:	f7fe f861 	bl	800119c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e077      	b.n	80031dc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ec:	4b3e      	ldr	r3, [pc, #248]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 020c 	and.w	r2, r3, #12
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d1eb      	bne.n	80030d6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2b80      	cmp	r3, #128	@ 0x80
 8003102:	d105      	bne.n	8003110 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003104:	4b38      	ldr	r3, [pc, #224]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	4a37      	ldr	r2, [pc, #220]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 800310a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800310e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d010      	beq.n	800313e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	4b31      	ldr	r3, [pc, #196]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003128:	429a      	cmp	r2, r3
 800312a:	d208      	bcs.n	800313e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312c:	4b2e      	ldr	r3, [pc, #184]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	492b      	ldr	r1, [pc, #172]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800313e:	4b29      	ldr	r3, [pc, #164]	@ (80031e4 <HAL_RCC_ClockConfig+0x25c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d210      	bcs.n	800316e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314c:	4b25      	ldr	r3, [pc, #148]	@ (80031e4 <HAL_RCC_ClockConfig+0x25c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f023 020f 	bic.w	r2, r3, #15
 8003154:	4923      	ldr	r1, [pc, #140]	@ (80031e4 <HAL_RCC_ClockConfig+0x25c>)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315c:	4b21      	ldr	r3, [pc, #132]	@ (80031e4 <HAL_RCC_ClockConfig+0x25c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d001      	beq.n	800316e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e036      	b.n	80031dc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800317a:	4b1b      	ldr	r3, [pc, #108]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	4918      	ldr	r1, [pc, #96]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 8003188:	4313      	orrs	r3, r2
 800318a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d009      	beq.n	80031ac <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003198:	4b13      	ldr	r3, [pc, #76]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4910      	ldr	r1, [pc, #64]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ac:	f000 f826 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b0d      	ldr	r3, [pc, #52]	@ (80031e8 <HAL_RCC_ClockConfig+0x260>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	091b      	lsrs	r3, r3, #4
 80031b8:	f003 030f 	and.w	r3, r3, #15
 80031bc:	490c      	ldr	r1, [pc, #48]	@ (80031f0 <HAL_RCC_ClockConfig+0x268>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
 80031c8:	4a0a      	ldr	r2, [pc, #40]	@ (80031f4 <HAL_RCC_ClockConfig+0x26c>)
 80031ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031cc:	4b0a      	ldr	r3, [pc, #40]	@ (80031f8 <HAL_RCC_ClockConfig+0x270>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd ff93 	bl	80010fc <HAL_InitTick>
 80031d6:	4603      	mov	r3, r0
 80031d8:	73fb      	strb	r3, [r7, #15]

  return status;
 80031da:	7bfb      	ldrb	r3, [r7, #15]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40022000 	.word	0x40022000
 80031e8:	40021000 	.word	0x40021000
 80031ec:	04c4b400 	.word	0x04c4b400
 80031f0:	080056a8 	.word	0x080056a8
 80031f4:	20000000 	.word	0x20000000
 80031f8:	20000038 	.word	0x20000038

080031fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	@ 0x24
 8003200:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	2300      	movs	r3, #0
 8003208:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800320a:	4b3e      	ldr	r3, [pc, #248]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x108>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003214:	4b3b      	ldr	r3, [pc, #236]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x108>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x34>
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	2b0c      	cmp	r3, #12
 8003228:	d121      	bne.n	800326e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d11e      	bne.n	800326e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003230:	4b34      	ldr	r3, [pc, #208]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x108>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d107      	bne.n	800324c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800323c:	4b31      	ldr	r3, [pc, #196]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x108>)
 800323e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003242:	0a1b      	lsrs	r3, r3, #8
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	61fb      	str	r3, [r7, #28]
 800324a:	e005      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800324c:	4b2d      	ldr	r3, [pc, #180]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x108>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003258:	4a2b      	ldr	r2, [pc, #172]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x10c>)
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003260:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10d      	bne.n	8003284 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800326c:	e00a      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b04      	cmp	r3, #4
 8003272:	d102      	bne.n	800327a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003274:	4b25      	ldr	r3, [pc, #148]	@ (800330c <HAL_RCC_GetSysClockFreq+0x110>)
 8003276:	61bb      	str	r3, [r7, #24]
 8003278:	e004      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b08      	cmp	r3, #8
 800327e:	d101      	bne.n	8003284 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003280:	4b23      	ldr	r3, [pc, #140]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x114>)
 8003282:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b0c      	cmp	r3, #12
 8003288:	d134      	bne.n	80032f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800328a:	4b1e      	ldr	r3, [pc, #120]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x108>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d003      	beq.n	80032a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d003      	beq.n	80032a8 <HAL_RCC_GetSysClockFreq+0xac>
 80032a0:	e005      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032a2:	4b1a      	ldr	r3, [pc, #104]	@ (800330c <HAL_RCC_GetSysClockFreq+0x110>)
 80032a4:	617b      	str	r3, [r7, #20]
      break;
 80032a6:	e005      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032a8:	4b19      	ldr	r3, [pc, #100]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x114>)
 80032aa:	617b      	str	r3, [r7, #20]
      break;
 80032ac:	e002      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	617b      	str	r3, [r7, #20]
      break;
 80032b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032b4:	4b13      	ldr	r3, [pc, #76]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x108>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	3301      	adds	r3, #1
 80032c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032c2:	4b10      	ldr	r3, [pc, #64]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	0a1b      	lsrs	r3, r3, #8
 80032c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	fb03 f202 	mul.w	r2, r3, r2
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032da:	4b0a      	ldr	r3, [pc, #40]	@ (8003304 <HAL_RCC_GetSysClockFreq+0x108>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	0e5b      	lsrs	r3, r3, #25
 80032e0:	f003 0303 	and.w	r3, r3, #3
 80032e4:	3301      	adds	r3, #1
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032f4:	69bb      	ldr	r3, [r7, #24]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3724      	adds	r7, #36	@ 0x24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
 8003308:	080056c0 	.word	0x080056c0
 800330c:	00f42400 	.word	0x00f42400
 8003310:	007a1200 	.word	0x007a1200

08003314 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003318:	4b03      	ldr	r3, [pc, #12]	@ (8003328 <HAL_RCC_GetHCLKFreq+0x14>)
 800331a:	681b      	ldr	r3, [r3, #0]
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	20000000 	.word	0x20000000

0800332c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003330:	f7ff fff0 	bl	8003314 <HAL_RCC_GetHCLKFreq>
 8003334:	4602      	mov	r2, r0
 8003336:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	0a1b      	lsrs	r3, r3, #8
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	4904      	ldr	r1, [pc, #16]	@ (8003354 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000
 8003354:	080056b8 	.word	0x080056b8

08003358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800335c:	f7ff ffda 	bl	8003314 <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b06      	ldr	r3, [pc, #24]	@ (800337c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	0adb      	lsrs	r3, r3, #11
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4904      	ldr	r1, [pc, #16]	@ (8003380 <HAL_RCC_GetPCLK2Freq+0x28>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	f003 031f 	and.w	r3, r3, #31
 8003374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000
 8003380:	080056b8 	.word	0x080056b8

08003384 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800338c:	2300      	movs	r3, #0
 800338e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003390:	4b27      	ldr	r3, [pc, #156]	@ (8003430 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800339c:	f7ff f916 	bl	80025cc <HAL_PWREx_GetVoltageRange>
 80033a0:	6178      	str	r0, [r7, #20]
 80033a2:	e014      	b.n	80033ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033a4:	4b22      	ldr	r3, [pc, #136]	@ (8003430 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a8:	4a21      	ldr	r2, [pc, #132]	@ (8003430 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80033b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003430 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033bc:	f7ff f906 	bl	80025cc <HAL_PWREx_GetVoltageRange>
 80033c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003430 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003430 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033d4:	d10b      	bne.n	80033ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b80      	cmp	r3, #128	@ 0x80
 80033da:	d913      	bls.n	8003404 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2ba0      	cmp	r3, #160	@ 0xa0
 80033e0:	d902      	bls.n	80033e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033e2:	2302      	movs	r3, #2
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	e00d      	b.n	8003404 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033e8:	2301      	movs	r3, #1
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	e00a      	b.n	8003404 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80033f2:	d902      	bls.n	80033fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80033f4:	2302      	movs	r3, #2
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	e004      	b.n	8003404 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b70      	cmp	r3, #112	@ 0x70
 80033fe:	d101      	bne.n	8003404 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003400:	2301      	movs	r3, #1
 8003402:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003404:	4b0b      	ldr	r3, [pc, #44]	@ (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f023 020f 	bic.w	r2, r3, #15
 800340c:	4909      	ldr	r1, [pc, #36]	@ (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003414:	4b07      	ldr	r3, [pc, #28]	@ (8003434 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	429a      	cmp	r2, r3
 8003420:	d001      	beq.n	8003426 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40021000 	.word	0x40021000
 8003434:	40022000 	.word	0x40022000

08003438 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800343e:	4b2d      	ldr	r3, [pc, #180]	@ (80034f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b03      	cmp	r3, #3
 800344c:	d00b      	beq.n	8003466 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d825      	bhi.n	80034a0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d008      	beq.n	800346c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d11f      	bne.n	80034a0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003460:	4b25      	ldr	r3, [pc, #148]	@ (80034f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003462:	613b      	str	r3, [r7, #16]
    break;
 8003464:	e01f      	b.n	80034a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003466:	4b25      	ldr	r3, [pc, #148]	@ (80034fc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003468:	613b      	str	r3, [r7, #16]
    break;
 800346a:	e01c      	b.n	80034a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800346c:	4b21      	ldr	r3, [pc, #132]	@ (80034f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b00      	cmp	r3, #0
 8003476:	d107      	bne.n	8003488 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003478:	4b1e      	ldr	r3, [pc, #120]	@ (80034f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800347a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800347e:	0a1b      	lsrs	r3, r3, #8
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e005      	b.n	8003494 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003488:	4b1a      	ldr	r3, [pc, #104]	@ (80034f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003494:	4a1a      	ldr	r2, [pc, #104]	@ (8003500 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349c:	613b      	str	r3, [r7, #16]
    break;
 800349e:	e002      	b.n	80034a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]
    break;
 80034a4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034a6:	4b13      	ldr	r3, [pc, #76]	@ (80034f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	091b      	lsrs	r3, r3, #4
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	3301      	adds	r3, #1
 80034b2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034b4:	4b0f      	ldr	r3, [pc, #60]	@ (80034f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	0a1b      	lsrs	r3, r3, #8
 80034ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	fb03 f202 	mul.w	r2, r3, r2
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034cc:	4b09      	ldr	r3, [pc, #36]	@ (80034f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	0e5b      	lsrs	r3, r3, #25
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	3301      	adds	r3, #1
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80034e6:	683b      	ldr	r3, [r7, #0]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	40021000 	.word	0x40021000
 80034f8:	00f42400 	.word	0x00f42400
 80034fc:	007a1200 	.word	0x007a1200
 8003500:	080056c0 	.word	0x080056c0

08003504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800350c:	2300      	movs	r3, #0
 800350e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003510:	2300      	movs	r3, #0
 8003512:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800351c:	2b00      	cmp	r3, #0
 800351e:	d040      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003524:	2b80      	cmp	r3, #128	@ 0x80
 8003526:	d02a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003528:	2b80      	cmp	r3, #128	@ 0x80
 800352a:	d825      	bhi.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800352c:	2b60      	cmp	r3, #96	@ 0x60
 800352e:	d026      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003530:	2b60      	cmp	r3, #96	@ 0x60
 8003532:	d821      	bhi.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003534:	2b40      	cmp	r3, #64	@ 0x40
 8003536:	d006      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003538:	2b40      	cmp	r3, #64	@ 0x40
 800353a:	d81d      	bhi.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800353c:	2b00      	cmp	r3, #0
 800353e:	d009      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003540:	2b20      	cmp	r3, #32
 8003542:	d010      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003544:	e018      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003546:	4b89      	ldr	r3, [pc, #548]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	4a88      	ldr	r2, [pc, #544]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003550:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003552:	e015      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3304      	adds	r3, #4
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fb02 	bl	8003b64 <RCCEx_PLLSAI1_Config>
 8003560:	4603      	mov	r3, r0
 8003562:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003564:	e00c      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3320      	adds	r3, #32
 800356a:	2100      	movs	r1, #0
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fbed 	bl	8003d4c <RCCEx_PLLSAI2_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003576:	e003      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	74fb      	strb	r3, [r7, #19]
      break;
 800357c:	e000      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800357e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003580:	7cfb      	ldrb	r3, [r7, #19]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10b      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003586:	4b79      	ldr	r3, [pc, #484]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003588:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800358c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003594:	4975      	ldr	r1, [pc, #468]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800359c:	e001      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359e:	7cfb      	ldrb	r3, [r7, #19]
 80035a0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d047      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035b6:	d030      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80035b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035bc:	d82a      	bhi.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80035be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035c2:	d02a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80035c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035c8:	d824      	bhi.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80035ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035ce:	d008      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80035d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035d4:	d81e      	bhi.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80035da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035de:	d010      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80035e0:	e018      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035e2:	4b62      	ldr	r3, [pc, #392]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	4a61      	ldr	r2, [pc, #388]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ec:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035ee:	e015      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3304      	adds	r3, #4
 80035f4:	2100      	movs	r1, #0
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fab4 	bl	8003b64 <RCCEx_PLLSAI1_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003600:	e00c      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3320      	adds	r3, #32
 8003606:	2100      	movs	r1, #0
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fb9f 	bl	8003d4c <RCCEx_PLLSAI2_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003612:	e003      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	74fb      	strb	r3, [r7, #19]
      break;
 8003618:	e000      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800361a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800361c:	7cfb      	ldrb	r3, [r7, #19]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10b      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003622:	4b52      	ldr	r3, [pc, #328]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003624:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003628:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003630:	494e      	ldr	r1, [pc, #312]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003638:	e001      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363a:	7cfb      	ldrb	r3, [r7, #19]
 800363c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 809f 	beq.w	800378a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364c:	2300      	movs	r3, #0
 800364e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003650:	4b46      	ldr	r3, [pc, #280]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003660:	2300      	movs	r3, #0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00d      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003666:	4b41      	ldr	r3, [pc, #260]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366a:	4a40      	ldr	r2, [pc, #256]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800366c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003670:	6593      	str	r3, [r2, #88]	@ 0x58
 8003672:	4b3e      	ldr	r3, [pc, #248]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800367e:	2301      	movs	r3, #1
 8003680:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003682:	4b3b      	ldr	r3, [pc, #236]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a3a      	ldr	r2, [pc, #232]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800368c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800368e:	f7fd fd85 	bl	800119c <HAL_GetTick>
 8003692:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003694:	e009      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003696:	f7fd fd81 	bl	800119c <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d902      	bls.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	74fb      	strb	r3, [r7, #19]
        break;
 80036a8:	e005      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036aa:	4b31      	ldr	r3, [pc, #196]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0ef      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80036b6:	7cfb      	ldrb	r3, [r7, #19]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d15b      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036bc:	4b2b      	ldr	r3, [pc, #172]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036c6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01f      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d019      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036da:	4b24      	ldr	r3, [pc, #144]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036e6:	4b21      	ldr	r3, [pc, #132]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ec:	4a1f      	ldr	r2, [pc, #124]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036f6:	4b1d      	ldr	r3, [pc, #116]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036fc:	4a1b      	ldr	r2, [pc, #108]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003702:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003706:	4a19      	ldr	r2, [pc, #100]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d016      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fd fd40 	bl	800119c <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800371e:	e00b      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003720:	f7fd fd3c 	bl	800119c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800372e:	4293      	cmp	r3, r2
 8003730:	d902      	bls.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	74fb      	strb	r3, [r7, #19]
            break;
 8003736:	e006      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003738:	4b0c      	ldr	r3, [pc, #48]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0ec      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003746:	7cfb      	ldrb	r3, [r7, #19]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10c      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800374c:	4b07      	ldr	r3, [pc, #28]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003752:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375c:	4903      	ldr	r1, [pc, #12]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003764:	e008      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003766:	7cfb      	ldrb	r3, [r7, #19]
 8003768:	74bb      	strb	r3, [r7, #18]
 800376a:	e005      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800376c:	40021000 	.word	0x40021000
 8003770:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003774:	7cfb      	ldrb	r3, [r7, #19]
 8003776:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003778:	7c7b      	ldrb	r3, [r7, #17]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d105      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377e:	4ba0      	ldr	r3, [pc, #640]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003782:	4a9f      	ldr	r2, [pc, #636]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003784:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003788:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003796:	4b9a      	ldr	r3, [pc, #616]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379c:	f023 0203 	bic.w	r2, r3, #3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a4:	4996      	ldr	r1, [pc, #600]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037b8:	4b91      	ldr	r3, [pc, #580]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037be:	f023 020c 	bic.w	r2, r3, #12
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c6:	498e      	ldr	r1, [pc, #568]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037da:	4b89      	ldr	r3, [pc, #548]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e8:	4985      	ldr	r1, [pc, #532]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037fc:	4b80      	ldr	r3, [pc, #512]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003802:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800380a:	497d      	ldr	r1, [pc, #500]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800381e:	4b78      	ldr	r3, [pc, #480]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003824:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800382c:	4974      	ldr	r1, [pc, #464]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003840:	4b6f      	ldr	r3, [pc, #444]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003846:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800384e:	496c      	ldr	r1, [pc, #432]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003862:	4b67      	ldr	r3, [pc, #412]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003868:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003870:	4963      	ldr	r1, [pc, #396]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003884:	4b5e      	ldr	r3, [pc, #376]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003892:	495b      	ldr	r1, [pc, #364]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038a6:	4b56      	ldr	r3, [pc, #344]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b4:	4952      	ldr	r1, [pc, #328]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d6:	494a      	ldr	r1, [pc, #296]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ea:	4b45      	ldr	r3, [pc, #276]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f8:	4941      	ldr	r1, [pc, #260]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800390c:	4b3c      	ldr	r3, [pc, #240]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800390e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003912:	f023 0203 	bic.w	r2, r3, #3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391a:	4939      	ldr	r1, [pc, #228]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d028      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800392e:	4b34      	ldr	r3, [pc, #208]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003934:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800393c:	4930      	ldr	r1, [pc, #192]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003948:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800394c:	d106      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800394e:	4b2c      	ldr	r3, [pc, #176]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	4a2b      	ldr	r2, [pc, #172]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003954:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003958:	60d3      	str	r3, [r2, #12]
 800395a:	e011      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003960:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003964:	d10c      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3304      	adds	r3, #4
 800396a:	2101      	movs	r1, #1
 800396c:	4618      	mov	r0, r3
 800396e:	f000 f8f9 	bl	8003b64 <RCCEx_PLLSAI1_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003976:	7cfb      	ldrb	r3, [r7, #19]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d04d      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003990:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003994:	d108      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003996:	4b1a      	ldr	r3, [pc, #104]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003998:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800399c:	4a18      	ldr	r2, [pc, #96]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800399e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039a2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80039a6:	e012      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80039a8:	4b15      	ldr	r3, [pc, #84]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039ae:	4a14      	ldr	r2, [pc, #80]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039b4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80039b8:	4b11      	ldr	r3, [pc, #68]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039c6:	490e      	ldr	r1, [pc, #56]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039d6:	d106      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d8:	4b09      	ldr	r3, [pc, #36]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4a08      	ldr	r2, [pc, #32]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039e2:	60d3      	str	r3, [r2, #12]
 80039e4:	e020      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039ee:	d109      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039f0:	4b03      	ldr	r3, [pc, #12]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4a02      	ldr	r2, [pc, #8]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039fa:	60d3      	str	r3, [r2, #12]
 80039fc:	e014      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a0c:	d10c      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3304      	adds	r3, #4
 8003a12:	2101      	movs	r1, #1
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 f8a5 	bl	8003b64 <RCCEx_PLLSAI1_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a1e:	7cfb      	ldrb	r3, [r7, #19]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003a24:	7cfb      	ldrb	r3, [r7, #19]
 8003a26:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d028      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a34:	4b4a      	ldr	r3, [pc, #296]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a42:	4947      	ldr	r1, [pc, #284]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a52:	d106      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a54:	4b42      	ldr	r3, [pc, #264]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	4a41      	ldr	r2, [pc, #260]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a5e:	60d3      	str	r3, [r2, #12]
 8003a60:	e011      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a6a:	d10c      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	2101      	movs	r1, #1
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 f876 	bl	8003b64 <RCCEx_PLLSAI1_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a7c:	7cfb      	ldrb	r3, [r7, #19]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003a82:	7cfb      	ldrb	r3, [r7, #19]
 8003a84:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01e      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a92:	4b33      	ldr	r3, [pc, #204]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a98:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aa2:	492f      	ldr	r1, [pc, #188]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ab0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	2102      	movs	r1, #2
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 f851 	bl	8003b64 <RCCEx_PLLSAI1_Config>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ac6:	7cfb      	ldrb	r3, [r7, #19]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003acc:	7cfb      	ldrb	r3, [r7, #19]
 8003ace:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00b      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003adc:	4b20      	ldr	r3, [pc, #128]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ade:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ae2:	f023 0204 	bic.w	r2, r3, #4
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aec:	491c      	ldr	r1, [pc, #112]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00b      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b00:	4b17      	ldr	r3, [pc, #92]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b06:	f023 0218 	bic.w	r2, r3, #24
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b10:	4913      	ldr	r1, [pc, #76]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d017      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003b24:	4b0e      	ldr	r3, [pc, #56]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b34:	490a      	ldr	r1, [pc, #40]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b46:	d105      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b48:	4b05      	ldr	r3, [pc, #20]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4a04      	ldr	r2, [pc, #16]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b54:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000

08003b64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b72:	4b72      	ldr	r3, [pc, #456]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00e      	beq.n	8003b9c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b7e:	4b6f      	ldr	r3, [pc, #444]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0203 	and.w	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d103      	bne.n	8003b96 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
       ||
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d142      	bne.n	8003c1c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
 8003b9a:	e03f      	b.n	8003c1c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d018      	beq.n	8003bd6 <RCCEx_PLLSAI1_Config+0x72>
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d825      	bhi.n	8003bf4 <RCCEx_PLLSAI1_Config+0x90>
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d002      	beq.n	8003bb2 <RCCEx_PLLSAI1_Config+0x4e>
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d009      	beq.n	8003bc4 <RCCEx_PLLSAI1_Config+0x60>
 8003bb0:	e020      	b.n	8003bf4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bb2:	4b62      	ldr	r3, [pc, #392]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d11d      	bne.n	8003bfa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc2:	e01a      	b.n	8003bfa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bc4:	4b5d      	ldr	r3, [pc, #372]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d116      	bne.n	8003bfe <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd4:	e013      	b.n	8003bfe <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bd6:	4b59      	ldr	r3, [pc, #356]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10f      	bne.n	8003c02 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003be2:	4b56      	ldr	r3, [pc, #344]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bf2:	e006      	b.n	8003c02 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf8:	e004      	b.n	8003c04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003bfa:	bf00      	nop
 8003bfc:	e002      	b.n	8003c04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003bfe:	bf00      	nop
 8003c00:	e000      	b.n	8003c04 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003c02:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d108      	bne.n	8003c1c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003c0a:	4b4c      	ldr	r3, [pc, #304]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f023 0203 	bic.w	r2, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4949      	ldr	r1, [pc, #292]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f040 8086 	bne.w	8003d30 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c24:	4b45      	ldr	r3, [pc, #276]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a44      	ldr	r2, [pc, #272]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c30:	f7fd fab4 	bl	800119c <HAL_GetTick>
 8003c34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c36:	e009      	b.n	8003c4c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c38:	f7fd fab0 	bl	800119c <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d902      	bls.n	8003c4c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	73fb      	strb	r3, [r7, #15]
        break;
 8003c4a:	e005      	b.n	8003c58 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ef      	bne.n	8003c38 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d168      	bne.n	8003d30 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d113      	bne.n	8003c8c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c64:	4b35      	ldr	r3, [pc, #212]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	4b35      	ldr	r3, [pc, #212]	@ (8003d40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6892      	ldr	r2, [r2, #8]
 8003c70:	0211      	lsls	r1, r2, #8
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	68d2      	ldr	r2, [r2, #12]
 8003c76:	06d2      	lsls	r2, r2, #27
 8003c78:	4311      	orrs	r1, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6852      	ldr	r2, [r2, #4]
 8003c7e:	3a01      	subs	r2, #1
 8003c80:	0112      	lsls	r2, r2, #4
 8003c82:	430a      	orrs	r2, r1
 8003c84:	492d      	ldr	r1, [pc, #180]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	610b      	str	r3, [r1, #16]
 8003c8a:	e02d      	b.n	8003ce8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d115      	bne.n	8003cbe <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c92:	4b2a      	ldr	r3, [pc, #168]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	4b2b      	ldr	r3, [pc, #172]	@ (8003d44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6892      	ldr	r2, [r2, #8]
 8003c9e:	0211      	lsls	r1, r2, #8
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6912      	ldr	r2, [r2, #16]
 8003ca4:	0852      	lsrs	r2, r2, #1
 8003ca6:	3a01      	subs	r2, #1
 8003ca8:	0552      	lsls	r2, r2, #21
 8003caa:	4311      	orrs	r1, r2
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6852      	ldr	r2, [r2, #4]
 8003cb0:	3a01      	subs	r2, #1
 8003cb2:	0112      	lsls	r2, r2, #4
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	4921      	ldr	r1, [pc, #132]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	610b      	str	r3, [r1, #16]
 8003cbc:	e014      	b.n	8003ce8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	4b21      	ldr	r3, [pc, #132]	@ (8003d48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6892      	ldr	r2, [r2, #8]
 8003cca:	0211      	lsls	r1, r2, #8
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6952      	ldr	r2, [r2, #20]
 8003cd0:	0852      	lsrs	r2, r2, #1
 8003cd2:	3a01      	subs	r2, #1
 8003cd4:	0652      	lsls	r2, r2, #25
 8003cd6:	4311      	orrs	r1, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6852      	ldr	r2, [r2, #4]
 8003cdc:	3a01      	subs	r2, #1
 8003cde:	0112      	lsls	r2, r2, #4
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	4916      	ldr	r1, [pc, #88]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ce8:	4b14      	ldr	r3, [pc, #80]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a13      	ldr	r2, [pc, #76]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003cf2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fd fa52 	bl	800119c <HAL_GetTick>
 8003cf8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cfa:	e009      	b.n	8003d10 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cfc:	f7fd fa4e 	bl	800119c <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d902      	bls.n	8003d10 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	73fb      	strb	r3, [r7, #15]
          break;
 8003d0e:	e005      	b.n	8003d1c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d10:	4b0a      	ldr	r3, [pc, #40]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ef      	beq.n	8003cfc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d22:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d24:	691a      	ldr	r2, [r3, #16]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	4904      	ldr	r1, [pc, #16]	@ (8003d3c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	07ff800f 	.word	0x07ff800f
 8003d44:	ff9f800f 	.word	0xff9f800f
 8003d48:	f9ff800f 	.word	0xf9ff800f

08003d4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d5a:	4b72      	ldr	r3, [pc, #456]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00e      	beq.n	8003d84 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d66:	4b6f      	ldr	r3, [pc, #444]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f003 0203 	and.w	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d103      	bne.n	8003d7e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
       ||
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d142      	bne.n	8003e04 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
 8003d82:	e03f      	b.n	8003e04 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d018      	beq.n	8003dbe <RCCEx_PLLSAI2_Config+0x72>
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d825      	bhi.n	8003ddc <RCCEx_PLLSAI2_Config+0x90>
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d002      	beq.n	8003d9a <RCCEx_PLLSAI2_Config+0x4e>
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d009      	beq.n	8003dac <RCCEx_PLLSAI2_Config+0x60>
 8003d98:	e020      	b.n	8003ddc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d9a:	4b62      	ldr	r3, [pc, #392]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d11d      	bne.n	8003de2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003daa:	e01a      	b.n	8003de2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dac:	4b5d      	ldr	r3, [pc, #372]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d116      	bne.n	8003de6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dbc:	e013      	b.n	8003de6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dbe:	4b59      	ldr	r3, [pc, #356]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dca:	4b56      	ldr	r3, [pc, #344]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dda:	e006      	b.n	8003dea <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
      break;
 8003de0:	e004      	b.n	8003dec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003de2:	bf00      	nop
 8003de4:	e002      	b.n	8003dec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003de6:	bf00      	nop
 8003de8:	e000      	b.n	8003dec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003dea:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d108      	bne.n	8003e04 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003df2:	4b4c      	ldr	r3, [pc, #304]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f023 0203 	bic.w	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4949      	ldr	r1, [pc, #292]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f040 8086 	bne.w	8003f18 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e0c:	4b45      	ldr	r3, [pc, #276]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a44      	ldr	r2, [pc, #272]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e18:	f7fd f9c0 	bl	800119c <HAL_GetTick>
 8003e1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e1e:	e009      	b.n	8003e34 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e20:	f7fd f9bc 	bl	800119c <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d902      	bls.n	8003e34 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	73fb      	strb	r3, [r7, #15]
        break;
 8003e32:	e005      	b.n	8003e40 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e34:	4b3b      	ldr	r3, [pc, #236]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1ef      	bne.n	8003e20 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d168      	bne.n	8003f18 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d113      	bne.n	8003e74 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e4c:	4b35      	ldr	r3, [pc, #212]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	4b35      	ldr	r3, [pc, #212]	@ (8003f28 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6892      	ldr	r2, [r2, #8]
 8003e58:	0211      	lsls	r1, r2, #8
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	68d2      	ldr	r2, [r2, #12]
 8003e5e:	06d2      	lsls	r2, r2, #27
 8003e60:	4311      	orrs	r1, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6852      	ldr	r2, [r2, #4]
 8003e66:	3a01      	subs	r2, #1
 8003e68:	0112      	lsls	r2, r2, #4
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	492d      	ldr	r1, [pc, #180]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	614b      	str	r3, [r1, #20]
 8003e72:	e02d      	b.n	8003ed0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d115      	bne.n	8003ea6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e7a:	4b2a      	ldr	r3, [pc, #168]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e7c:	695a      	ldr	r2, [r3, #20]
 8003e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003f2c <RCCEx_PLLSAI2_Config+0x1e0>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6892      	ldr	r2, [r2, #8]
 8003e86:	0211      	lsls	r1, r2, #8
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6912      	ldr	r2, [r2, #16]
 8003e8c:	0852      	lsrs	r2, r2, #1
 8003e8e:	3a01      	subs	r2, #1
 8003e90:	0552      	lsls	r2, r2, #21
 8003e92:	4311      	orrs	r1, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6852      	ldr	r2, [r2, #4]
 8003e98:	3a01      	subs	r2, #1
 8003e9a:	0112      	lsls	r2, r2, #4
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	4921      	ldr	r1, [pc, #132]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	614b      	str	r3, [r1, #20]
 8003ea4:	e014      	b.n	8003ed0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ea8:	695a      	ldr	r2, [r3, #20]
 8003eaa:	4b21      	ldr	r3, [pc, #132]	@ (8003f30 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6892      	ldr	r2, [r2, #8]
 8003eb2:	0211      	lsls	r1, r2, #8
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6952      	ldr	r2, [r2, #20]
 8003eb8:	0852      	lsrs	r2, r2, #1
 8003eba:	3a01      	subs	r2, #1
 8003ebc:	0652      	lsls	r2, r2, #25
 8003ebe:	4311      	orrs	r1, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6852      	ldr	r2, [r2, #4]
 8003ec4:	3a01      	subs	r2, #1
 8003ec6:	0112      	lsls	r2, r2, #4
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	4916      	ldr	r1, [pc, #88]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ed0:	4b14      	ldr	r3, [pc, #80]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a13      	ldr	r2, [pc, #76]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003edc:	f7fd f95e 	bl	800119c <HAL_GetTick>
 8003ee0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ee2:	e009      	b.n	8003ef8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ee4:	f7fd f95a 	bl	800119c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d902      	bls.n	8003ef8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ef6:	e005      	b.n	8003f04 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ef      	beq.n	8003ee4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f0a:	4b06      	ldr	r3, [pc, #24]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	4904      	ldr	r1, [pc, #16]	@ (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40021000 	.word	0x40021000
 8003f28:	07ff800f 	.word	0x07ff800f
 8003f2c:	ff9f800f 	.word	0xff9f800f
 8003f30:	f9ff800f 	.word	0xf9ff800f

08003f34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e042      	b.n	8003fcc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d106      	bne.n	8003f5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7fc fea3 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2224      	movs	r2, #36	@ 0x24
 8003f62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fbb2 	bl	80046e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f8b3 	bl	80040f0 <UART_SetConfig>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e01b      	b.n	8003fcc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fc31 	bl	800482c <UART_CheckIdleState>
 8003fca:	4603      	mov	r3, r0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08a      	sub	sp, #40	@ 0x28
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	d17b      	bne.n	80040e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <HAL_UART_Transmit+0x26>
 8003ff4:	88fb      	ldrh	r3, [r7, #6]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e074      	b.n	80040e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2221      	movs	r2, #33	@ 0x21
 800400a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800400e:	f7fd f8c5 	bl	800119c <HAL_GetTick>
 8004012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	88fa      	ldrh	r2, [r7, #6]
 8004018:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	88fa      	ldrh	r2, [r7, #6]
 8004020:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800402c:	d108      	bne.n	8004040 <HAL_UART_Transmit+0x6c>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d104      	bne.n	8004040 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004036:	2300      	movs	r3, #0
 8004038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	61bb      	str	r3, [r7, #24]
 800403e:	e003      	b.n	8004048 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004044:	2300      	movs	r3, #0
 8004046:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004048:	e030      	b.n	80040ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2200      	movs	r2, #0
 8004052:	2180      	movs	r1, #128	@ 0x80
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 fc93 	bl	8004980 <UART_WaitOnFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e03d      	b.n	80040e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10b      	bne.n	800408a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	881a      	ldrh	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800407e:	b292      	uxth	r2, r2
 8004080:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	3302      	adds	r3, #2
 8004086:	61bb      	str	r3, [r7, #24]
 8004088:	e007      	b.n	800409a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	781a      	ldrb	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	3301      	adds	r3, #1
 8004098:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1c8      	bne.n	800404a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2200      	movs	r2, #0
 80040c0:	2140      	movs	r1, #64	@ 0x40
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fc5c 	bl	8004980 <UART_WaitOnFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e006      	b.n	80040e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2220      	movs	r2, #32
 80040de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	e000      	b.n	80040e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80040e6:	2302      	movs	r3, #2
  }
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3720      	adds	r7, #32
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f4:	b08c      	sub	sp, #48	@ 0x30
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	431a      	orrs	r2, r3
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	431a      	orrs	r2, r3
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	4313      	orrs	r3, r2
 8004116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	4baa      	ldr	r3, [pc, #680]	@ (80043c8 <UART_SetConfig+0x2d8>)
 8004120:	4013      	ands	r3, r2
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004128:	430b      	orrs	r3, r1
 800412a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a9f      	ldr	r2, [pc, #636]	@ (80043cc <UART_SetConfig+0x2dc>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004158:	4313      	orrs	r3, r2
 800415a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004166:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	6812      	ldr	r2, [r2, #0]
 800416e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004170:	430b      	orrs	r3, r1
 8004172:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417a:	f023 010f 	bic.w	r1, r3, #15
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a90      	ldr	r2, [pc, #576]	@ (80043d0 <UART_SetConfig+0x2e0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d125      	bne.n	80041e0 <UART_SetConfig+0xf0>
 8004194:	4b8f      	ldr	r3, [pc, #572]	@ (80043d4 <UART_SetConfig+0x2e4>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d81a      	bhi.n	80041d8 <UART_SetConfig+0xe8>
 80041a2:	a201      	add	r2, pc, #4	@ (adr r2, 80041a8 <UART_SetConfig+0xb8>)
 80041a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a8:	080041b9 	.word	0x080041b9
 80041ac:	080041c9 	.word	0x080041c9
 80041b0:	080041c1 	.word	0x080041c1
 80041b4:	080041d1 	.word	0x080041d1
 80041b8:	2301      	movs	r3, #1
 80041ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041be:	e116      	b.n	80043ee <UART_SetConfig+0x2fe>
 80041c0:	2302      	movs	r3, #2
 80041c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041c6:	e112      	b.n	80043ee <UART_SetConfig+0x2fe>
 80041c8:	2304      	movs	r3, #4
 80041ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ce:	e10e      	b.n	80043ee <UART_SetConfig+0x2fe>
 80041d0:	2308      	movs	r3, #8
 80041d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041d6:	e10a      	b.n	80043ee <UART_SetConfig+0x2fe>
 80041d8:	2310      	movs	r3, #16
 80041da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041de:	e106      	b.n	80043ee <UART_SetConfig+0x2fe>
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a7c      	ldr	r2, [pc, #496]	@ (80043d8 <UART_SetConfig+0x2e8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d138      	bne.n	800425c <UART_SetConfig+0x16c>
 80041ea:	4b7a      	ldr	r3, [pc, #488]	@ (80043d4 <UART_SetConfig+0x2e4>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f0:	f003 030c 	and.w	r3, r3, #12
 80041f4:	2b0c      	cmp	r3, #12
 80041f6:	d82d      	bhi.n	8004254 <UART_SetConfig+0x164>
 80041f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004200 <UART_SetConfig+0x110>)
 80041fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fe:	bf00      	nop
 8004200:	08004235 	.word	0x08004235
 8004204:	08004255 	.word	0x08004255
 8004208:	08004255 	.word	0x08004255
 800420c:	08004255 	.word	0x08004255
 8004210:	08004245 	.word	0x08004245
 8004214:	08004255 	.word	0x08004255
 8004218:	08004255 	.word	0x08004255
 800421c:	08004255 	.word	0x08004255
 8004220:	0800423d 	.word	0x0800423d
 8004224:	08004255 	.word	0x08004255
 8004228:	08004255 	.word	0x08004255
 800422c:	08004255 	.word	0x08004255
 8004230:	0800424d 	.word	0x0800424d
 8004234:	2300      	movs	r3, #0
 8004236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800423a:	e0d8      	b.n	80043ee <UART_SetConfig+0x2fe>
 800423c:	2302      	movs	r3, #2
 800423e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004242:	e0d4      	b.n	80043ee <UART_SetConfig+0x2fe>
 8004244:	2304      	movs	r3, #4
 8004246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800424a:	e0d0      	b.n	80043ee <UART_SetConfig+0x2fe>
 800424c:	2308      	movs	r3, #8
 800424e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004252:	e0cc      	b.n	80043ee <UART_SetConfig+0x2fe>
 8004254:	2310      	movs	r3, #16
 8004256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800425a:	e0c8      	b.n	80043ee <UART_SetConfig+0x2fe>
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a5e      	ldr	r2, [pc, #376]	@ (80043dc <UART_SetConfig+0x2ec>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d125      	bne.n	80042b2 <UART_SetConfig+0x1c2>
 8004266:	4b5b      	ldr	r3, [pc, #364]	@ (80043d4 <UART_SetConfig+0x2e4>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004270:	2b30      	cmp	r3, #48	@ 0x30
 8004272:	d016      	beq.n	80042a2 <UART_SetConfig+0x1b2>
 8004274:	2b30      	cmp	r3, #48	@ 0x30
 8004276:	d818      	bhi.n	80042aa <UART_SetConfig+0x1ba>
 8004278:	2b20      	cmp	r3, #32
 800427a:	d00a      	beq.n	8004292 <UART_SetConfig+0x1a2>
 800427c:	2b20      	cmp	r3, #32
 800427e:	d814      	bhi.n	80042aa <UART_SetConfig+0x1ba>
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <UART_SetConfig+0x19a>
 8004284:	2b10      	cmp	r3, #16
 8004286:	d008      	beq.n	800429a <UART_SetConfig+0x1aa>
 8004288:	e00f      	b.n	80042aa <UART_SetConfig+0x1ba>
 800428a:	2300      	movs	r3, #0
 800428c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004290:	e0ad      	b.n	80043ee <UART_SetConfig+0x2fe>
 8004292:	2302      	movs	r3, #2
 8004294:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004298:	e0a9      	b.n	80043ee <UART_SetConfig+0x2fe>
 800429a:	2304      	movs	r3, #4
 800429c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042a0:	e0a5      	b.n	80043ee <UART_SetConfig+0x2fe>
 80042a2:	2308      	movs	r3, #8
 80042a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042a8:	e0a1      	b.n	80043ee <UART_SetConfig+0x2fe>
 80042aa:	2310      	movs	r3, #16
 80042ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042b0:	e09d      	b.n	80043ee <UART_SetConfig+0x2fe>
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a4a      	ldr	r2, [pc, #296]	@ (80043e0 <UART_SetConfig+0x2f0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d125      	bne.n	8004308 <UART_SetConfig+0x218>
 80042bc:	4b45      	ldr	r3, [pc, #276]	@ (80043d4 <UART_SetConfig+0x2e4>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80042c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80042c8:	d016      	beq.n	80042f8 <UART_SetConfig+0x208>
 80042ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80042cc:	d818      	bhi.n	8004300 <UART_SetConfig+0x210>
 80042ce:	2b80      	cmp	r3, #128	@ 0x80
 80042d0:	d00a      	beq.n	80042e8 <UART_SetConfig+0x1f8>
 80042d2:	2b80      	cmp	r3, #128	@ 0x80
 80042d4:	d814      	bhi.n	8004300 <UART_SetConfig+0x210>
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <UART_SetConfig+0x1f0>
 80042da:	2b40      	cmp	r3, #64	@ 0x40
 80042dc:	d008      	beq.n	80042f0 <UART_SetConfig+0x200>
 80042de:	e00f      	b.n	8004300 <UART_SetConfig+0x210>
 80042e0:	2300      	movs	r3, #0
 80042e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042e6:	e082      	b.n	80043ee <UART_SetConfig+0x2fe>
 80042e8:	2302      	movs	r3, #2
 80042ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ee:	e07e      	b.n	80043ee <UART_SetConfig+0x2fe>
 80042f0:	2304      	movs	r3, #4
 80042f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042f6:	e07a      	b.n	80043ee <UART_SetConfig+0x2fe>
 80042f8:	2308      	movs	r3, #8
 80042fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042fe:	e076      	b.n	80043ee <UART_SetConfig+0x2fe>
 8004300:	2310      	movs	r3, #16
 8004302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004306:	e072      	b.n	80043ee <UART_SetConfig+0x2fe>
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a35      	ldr	r2, [pc, #212]	@ (80043e4 <UART_SetConfig+0x2f4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d12a      	bne.n	8004368 <UART_SetConfig+0x278>
 8004312:	4b30      	ldr	r3, [pc, #192]	@ (80043d4 <UART_SetConfig+0x2e4>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004318:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800431c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004320:	d01a      	beq.n	8004358 <UART_SetConfig+0x268>
 8004322:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004326:	d81b      	bhi.n	8004360 <UART_SetConfig+0x270>
 8004328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800432c:	d00c      	beq.n	8004348 <UART_SetConfig+0x258>
 800432e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004332:	d815      	bhi.n	8004360 <UART_SetConfig+0x270>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <UART_SetConfig+0x250>
 8004338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800433c:	d008      	beq.n	8004350 <UART_SetConfig+0x260>
 800433e:	e00f      	b.n	8004360 <UART_SetConfig+0x270>
 8004340:	2300      	movs	r3, #0
 8004342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004346:	e052      	b.n	80043ee <UART_SetConfig+0x2fe>
 8004348:	2302      	movs	r3, #2
 800434a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800434e:	e04e      	b.n	80043ee <UART_SetConfig+0x2fe>
 8004350:	2304      	movs	r3, #4
 8004352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004356:	e04a      	b.n	80043ee <UART_SetConfig+0x2fe>
 8004358:	2308      	movs	r3, #8
 800435a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800435e:	e046      	b.n	80043ee <UART_SetConfig+0x2fe>
 8004360:	2310      	movs	r3, #16
 8004362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004366:	e042      	b.n	80043ee <UART_SetConfig+0x2fe>
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a17      	ldr	r2, [pc, #92]	@ (80043cc <UART_SetConfig+0x2dc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d13a      	bne.n	80043e8 <UART_SetConfig+0x2f8>
 8004372:	4b18      	ldr	r3, [pc, #96]	@ (80043d4 <UART_SetConfig+0x2e4>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004378:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800437c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004380:	d01a      	beq.n	80043b8 <UART_SetConfig+0x2c8>
 8004382:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004386:	d81b      	bhi.n	80043c0 <UART_SetConfig+0x2d0>
 8004388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800438c:	d00c      	beq.n	80043a8 <UART_SetConfig+0x2b8>
 800438e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004392:	d815      	bhi.n	80043c0 <UART_SetConfig+0x2d0>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <UART_SetConfig+0x2b0>
 8004398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800439c:	d008      	beq.n	80043b0 <UART_SetConfig+0x2c0>
 800439e:	e00f      	b.n	80043c0 <UART_SetConfig+0x2d0>
 80043a0:	2300      	movs	r3, #0
 80043a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043a6:	e022      	b.n	80043ee <UART_SetConfig+0x2fe>
 80043a8:	2302      	movs	r3, #2
 80043aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ae:	e01e      	b.n	80043ee <UART_SetConfig+0x2fe>
 80043b0:	2304      	movs	r3, #4
 80043b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043b6:	e01a      	b.n	80043ee <UART_SetConfig+0x2fe>
 80043b8:	2308      	movs	r3, #8
 80043ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043be:	e016      	b.n	80043ee <UART_SetConfig+0x2fe>
 80043c0:	2310      	movs	r3, #16
 80043c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043c6:	e012      	b.n	80043ee <UART_SetConfig+0x2fe>
 80043c8:	cfff69f3 	.word	0xcfff69f3
 80043cc:	40008000 	.word	0x40008000
 80043d0:	40013800 	.word	0x40013800
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40004400 	.word	0x40004400
 80043dc:	40004800 	.word	0x40004800
 80043e0:	40004c00 	.word	0x40004c00
 80043e4:	40005000 	.word	0x40005000
 80043e8:	2310      	movs	r3, #16
 80043ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4aae      	ldr	r2, [pc, #696]	@ (80046ac <UART_SetConfig+0x5bc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	f040 8097 	bne.w	8004528 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d823      	bhi.n	800444a <UART_SetConfig+0x35a>
 8004402:	a201      	add	r2, pc, #4	@ (adr r2, 8004408 <UART_SetConfig+0x318>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	0800442d 	.word	0x0800442d
 800440c:	0800444b 	.word	0x0800444b
 8004410:	08004435 	.word	0x08004435
 8004414:	0800444b 	.word	0x0800444b
 8004418:	0800443b 	.word	0x0800443b
 800441c:	0800444b 	.word	0x0800444b
 8004420:	0800444b 	.word	0x0800444b
 8004424:	0800444b 	.word	0x0800444b
 8004428:	08004443 	.word	0x08004443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800442c:	f7fe ff7e 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8004430:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004432:	e010      	b.n	8004456 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004434:	4b9e      	ldr	r3, [pc, #632]	@ (80046b0 <UART_SetConfig+0x5c0>)
 8004436:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004438:	e00d      	b.n	8004456 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800443a:	f7fe fedf 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 800443e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004440:	e009      	b.n	8004456 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004448:	e005      	b.n	8004456 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004454:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 8130 	beq.w	80046be <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	4a94      	ldr	r2, [pc, #592]	@ (80046b4 <UART_SetConfig+0x5c4>)
 8004464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004468:	461a      	mov	r2, r3
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004470:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	4413      	add	r3, r2
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	429a      	cmp	r2, r3
 8004480:	d305      	bcc.n	800448e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	429a      	cmp	r2, r3
 800448c:	d903      	bls.n	8004496 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004494:	e113      	b.n	80046be <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	2200      	movs	r2, #0
 800449a:	60bb      	str	r3, [r7, #8]
 800449c:	60fa      	str	r2, [r7, #12]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	4a84      	ldr	r2, [pc, #528]	@ (80046b4 <UART_SetConfig+0x5c4>)
 80044a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2200      	movs	r2, #0
 80044ac:	603b      	str	r3, [r7, #0]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044b8:	f7fb fefa 	bl	80002b0 <__aeabi_uldivmod>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4610      	mov	r0, r2
 80044c2:	4619      	mov	r1, r3
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	020b      	lsls	r3, r1, #8
 80044ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044d2:	0202      	lsls	r2, r0, #8
 80044d4:	6979      	ldr	r1, [r7, #20]
 80044d6:	6849      	ldr	r1, [r1, #4]
 80044d8:	0849      	lsrs	r1, r1, #1
 80044da:	2000      	movs	r0, #0
 80044dc:	460c      	mov	r4, r1
 80044de:	4605      	mov	r5, r0
 80044e0:	eb12 0804 	adds.w	r8, r2, r4
 80044e4:	eb43 0905 	adc.w	r9, r3, r5
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	469a      	mov	sl, r3
 80044f0:	4693      	mov	fp, r2
 80044f2:	4652      	mov	r2, sl
 80044f4:	465b      	mov	r3, fp
 80044f6:	4640      	mov	r0, r8
 80044f8:	4649      	mov	r1, r9
 80044fa:	f7fb fed9 	bl	80002b0 <__aeabi_uldivmod>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4613      	mov	r3, r2
 8004504:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800450c:	d308      	bcc.n	8004520 <UART_SetConfig+0x430>
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004514:	d204      	bcs.n	8004520 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6a3a      	ldr	r2, [r7, #32]
 800451c:	60da      	str	r2, [r3, #12]
 800451e:	e0ce      	b.n	80046be <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004526:	e0ca      	b.n	80046be <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004530:	d166      	bne.n	8004600 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004532:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004536:	2b08      	cmp	r3, #8
 8004538:	d827      	bhi.n	800458a <UART_SetConfig+0x49a>
 800453a:	a201      	add	r2, pc, #4	@ (adr r2, 8004540 <UART_SetConfig+0x450>)
 800453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004540:	08004565 	.word	0x08004565
 8004544:	0800456d 	.word	0x0800456d
 8004548:	08004575 	.word	0x08004575
 800454c:	0800458b 	.word	0x0800458b
 8004550:	0800457b 	.word	0x0800457b
 8004554:	0800458b 	.word	0x0800458b
 8004558:	0800458b 	.word	0x0800458b
 800455c:	0800458b 	.word	0x0800458b
 8004560:	08004583 	.word	0x08004583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004564:	f7fe fee2 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8004568:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800456a:	e014      	b.n	8004596 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800456c:	f7fe fef4 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 8004570:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004572:	e010      	b.n	8004596 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004574:	4b4e      	ldr	r3, [pc, #312]	@ (80046b0 <UART_SetConfig+0x5c0>)
 8004576:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004578:	e00d      	b.n	8004596 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800457a:	f7fe fe3f 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 800457e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004580:	e009      	b.n	8004596 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004586:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004588:	e005      	b.n	8004596 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004594:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 8090 	beq.w	80046be <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a2:	4a44      	ldr	r2, [pc, #272]	@ (80046b4 <UART_SetConfig+0x5c4>)
 80045a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045a8:	461a      	mov	r2, r3
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80045b0:	005a      	lsls	r2, r3, #1
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	441a      	add	r2, r3
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	2b0f      	cmp	r3, #15
 80045c8:	d916      	bls.n	80045f8 <UART_SetConfig+0x508>
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d0:	d212      	bcs.n	80045f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	f023 030f 	bic.w	r3, r3, #15
 80045da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	085b      	lsrs	r3, r3, #1
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	8bfb      	ldrh	r3, [r7, #30]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	8bfa      	ldrh	r2, [r7, #30]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	e062      	b.n	80046be <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80045fe:	e05e      	b.n	80046be <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004600:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004604:	2b08      	cmp	r3, #8
 8004606:	d828      	bhi.n	800465a <UART_SetConfig+0x56a>
 8004608:	a201      	add	r2, pc, #4	@ (adr r2, 8004610 <UART_SetConfig+0x520>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004635 	.word	0x08004635
 8004614:	0800463d 	.word	0x0800463d
 8004618:	08004645 	.word	0x08004645
 800461c:	0800465b 	.word	0x0800465b
 8004620:	0800464b 	.word	0x0800464b
 8004624:	0800465b 	.word	0x0800465b
 8004628:	0800465b 	.word	0x0800465b
 800462c:	0800465b 	.word	0x0800465b
 8004630:	08004653 	.word	0x08004653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004634:	f7fe fe7a 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8004638:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800463a:	e014      	b.n	8004666 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800463c:	f7fe fe8c 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 8004640:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004642:	e010      	b.n	8004666 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004644:	4b1a      	ldr	r3, [pc, #104]	@ (80046b0 <UART_SetConfig+0x5c0>)
 8004646:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004648:	e00d      	b.n	8004666 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800464a:	f7fe fdd7 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 800464e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004650:	e009      	b.n	8004666 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004656:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004658:	e005      	b.n	8004666 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004664:	bf00      	nop
    }

    if (pclk != 0U)
 8004666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004668:	2b00      	cmp	r3, #0
 800466a:	d028      	beq.n	80046be <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004670:	4a10      	ldr	r2, [pc, #64]	@ (80046b4 <UART_SetConfig+0x5c4>)
 8004672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004676:	461a      	mov	r2, r3
 8004678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467a:	fbb3 f2f2 	udiv	r2, r3, r2
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	085b      	lsrs	r3, r3, #1
 8004684:	441a      	add	r2, r3
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	fbb2 f3f3 	udiv	r3, r2, r3
 800468e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	2b0f      	cmp	r3, #15
 8004694:	d910      	bls.n	80046b8 <UART_SetConfig+0x5c8>
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800469c:	d20c      	bcs.n	80046b8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60da      	str	r2, [r3, #12]
 80046a8:	e009      	b.n	80046be <UART_SetConfig+0x5ce>
 80046aa:	bf00      	nop
 80046ac:	40008000 	.word	0x40008000
 80046b0:	00f42400 	.word	0x00f42400
 80046b4:	080056f0 	.word	0x080056f0
      }
      else
      {
        ret = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2200      	movs	r2, #0
 80046d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2200      	movs	r2, #0
 80046d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80046da:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3730      	adds	r7, #48	@ 0x30
 80046e2:	46bd      	mov	sp, r7
 80046e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080046e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479e:	f003 0320 	and.w	r3, r3, #32
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01a      	beq.n	80047fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047e6:	d10a      	bne.n	80047fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	605a      	str	r2, [r3, #4]
  }
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b098      	sub	sp, #96	@ 0x60
 8004830:	af02      	add	r7, sp, #8
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800483c:	f7fc fcae 	bl	800119c <HAL_GetTick>
 8004840:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b08      	cmp	r3, #8
 800484e:	d12f      	bne.n	80048b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004850:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004858:	2200      	movs	r2, #0
 800485a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f88e 	bl	8004980 <UART_WaitOnFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d022      	beq.n	80048b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800487a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800487e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004888:	647b      	str	r3, [r7, #68]	@ 0x44
 800488a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800488e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e6      	bne.n	800486a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e063      	b.n	8004978 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d149      	bne.n	8004952 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c6:	2200      	movs	r2, #0
 80048c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f857 	bl	8004980 <UART_WaitOnFlagUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d03c      	beq.n	8004952 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e0:	e853 3f00 	ldrex	r3, [r3]
 80048e4:	623b      	str	r3, [r7, #32]
   return(result);
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80048f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048fe:	e841 2300 	strex	r3, r2, [r1]
 8004902:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1e6      	bne.n	80048d8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3308      	adds	r3, #8
 8004910:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	60fb      	str	r3, [r7, #12]
   return(result);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f023 0301 	bic.w	r3, r3, #1
 8004920:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3308      	adds	r3, #8
 8004928:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800492a:	61fa      	str	r2, [r7, #28]
 800492c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	69b9      	ldr	r1, [r7, #24]
 8004930:	69fa      	ldr	r2, [r7, #28]
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	617b      	str	r3, [r7, #20]
   return(result);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e5      	bne.n	800490a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e012      	b.n	8004978 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3758      	adds	r7, #88	@ 0x58
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	4613      	mov	r3, r2
 800498e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004990:	e04f      	b.n	8004a32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d04b      	beq.n	8004a32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499a:	f7fc fbff 	bl	800119c <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d302      	bcc.n	80049b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e04e      	b.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d037      	beq.n	8004a32 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b80      	cmp	r3, #128	@ 0x80
 80049c6:	d034      	beq.n	8004a32 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b40      	cmp	r3, #64	@ 0x40
 80049cc:	d031      	beq.n	8004a32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d110      	bne.n	80049fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2208      	movs	r2, #8
 80049e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 f838 	bl	8004a5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2208      	movs	r2, #8
 80049ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e029      	b.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a0c:	d111      	bne.n	8004a32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 f81e 	bl	8004a5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e00f      	b.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69da      	ldr	r2, [r3, #28]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	bf0c      	ite	eq
 8004a42:	2301      	moveq	r3, #1
 8004a44:	2300      	movne	r3, #0
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	461a      	mov	r2, r3
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d0a0      	beq.n	8004992 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b095      	sub	sp, #84	@ 0x54
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6a:	e853 3f00 	ldrex	r3, [r3]
 8004a6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a80:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e6      	bne.n	8004a62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3308      	adds	r3, #8
 8004a9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3308      	adds	r3, #8
 8004ab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ab8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004abe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e3      	bne.n	8004a94 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d118      	bne.n	8004b06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f023 0310 	bic.w	r3, r3, #16
 8004ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004af2:	61bb      	str	r3, [r7, #24]
 8004af4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af6:	6979      	ldr	r1, [r7, #20]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	e841 2300 	strex	r3, r2, [r1]
 8004afe:	613b      	str	r3, [r7, #16]
   return(result);
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1e6      	bne.n	8004ad4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004b1a:	bf00      	nop
 8004b1c:	3754      	adds	r7, #84	@ 0x54
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b085      	sub	sp, #20
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_UARTEx_DisableFifoMode+0x16>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e027      	b.n	8004b8c <HAL_UARTEx_DisableFifoMode+0x66>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2224      	movs	r2, #36	@ 0x24
 8004b48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004b6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e02d      	b.n	8004c0c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2224      	movs	r2, #36	@ 0x24
 8004bbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0201 	bic.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f84f 	bl	8004c90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e02d      	b.n	8004c88 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2224      	movs	r2, #36	@ 0x24
 8004c38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0201 	bic.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f811 	bl	8004c90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d108      	bne.n	8004cb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004cb0:	e031      	b.n	8004d16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	0e5b      	lsrs	r3, r3, #25
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	0f5b      	lsrs	r3, r3, #29
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cda:	7bbb      	ldrb	r3, [r7, #14]
 8004cdc:	7b3a      	ldrb	r2, [r7, #12]
 8004cde:	4911      	ldr	r1, [pc, #68]	@ (8004d24 <UARTEx_SetNbDataToProcess+0x94>)
 8004ce0:	5c8a      	ldrb	r2, [r1, r2]
 8004ce2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ce6:	7b3a      	ldrb	r2, [r7, #12]
 8004ce8:	490f      	ldr	r1, [pc, #60]	@ (8004d28 <UARTEx_SetNbDataToProcess+0x98>)
 8004cea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cec:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	7b7a      	ldrb	r2, [r7, #13]
 8004cfc:	4909      	ldr	r1, [pc, #36]	@ (8004d24 <UARTEx_SetNbDataToProcess+0x94>)
 8004cfe:	5c8a      	ldrb	r2, [r1, r2]
 8004d00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d04:	7b7a      	ldrb	r2, [r7, #13]
 8004d06:	4908      	ldr	r1, [pc, #32]	@ (8004d28 <UARTEx_SetNbDataToProcess+0x98>)
 8004d08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004d16:	bf00      	nop
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	08005708 	.word	0x08005708
 8004d28:	08005710 	.word	0x08005710

08004d2c <siprintf>:
 8004d2c:	b40e      	push	{r1, r2, r3}
 8004d2e:	b500      	push	{lr}
 8004d30:	b09c      	sub	sp, #112	@ 0x70
 8004d32:	ab1d      	add	r3, sp, #116	@ 0x74
 8004d34:	9002      	str	r0, [sp, #8]
 8004d36:	9006      	str	r0, [sp, #24]
 8004d38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d3c:	4809      	ldr	r0, [pc, #36]	@ (8004d64 <siprintf+0x38>)
 8004d3e:	9107      	str	r1, [sp, #28]
 8004d40:	9104      	str	r1, [sp, #16]
 8004d42:	4909      	ldr	r1, [pc, #36]	@ (8004d68 <siprintf+0x3c>)
 8004d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d48:	9105      	str	r1, [sp, #20]
 8004d4a:	6800      	ldr	r0, [r0, #0]
 8004d4c:	9301      	str	r3, [sp, #4]
 8004d4e:	a902      	add	r1, sp, #8
 8004d50:	f000 f9a2 	bl	8005098 <_svfiprintf_r>
 8004d54:	9b02      	ldr	r3, [sp, #8]
 8004d56:	2200      	movs	r2, #0
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	b01c      	add	sp, #112	@ 0x70
 8004d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d60:	b003      	add	sp, #12
 8004d62:	4770      	bx	lr
 8004d64:	20000040 	.word	0x20000040
 8004d68:	ffff0208 	.word	0xffff0208

08004d6c <memset>:
 8004d6c:	4402      	add	r2, r0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d100      	bne.n	8004d76 <memset+0xa>
 8004d74:	4770      	bx	lr
 8004d76:	f803 1b01 	strb.w	r1, [r3], #1
 8004d7a:	e7f9      	b.n	8004d70 <memset+0x4>

08004d7c <__errno>:
 8004d7c:	4b01      	ldr	r3, [pc, #4]	@ (8004d84 <__errno+0x8>)
 8004d7e:	6818      	ldr	r0, [r3, #0]
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	20000040 	.word	0x20000040

08004d88 <__libc_init_array>:
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	4d0d      	ldr	r5, [pc, #52]	@ (8004dc0 <__libc_init_array+0x38>)
 8004d8c:	4c0d      	ldr	r4, [pc, #52]	@ (8004dc4 <__libc_init_array+0x3c>)
 8004d8e:	1b64      	subs	r4, r4, r5
 8004d90:	10a4      	asrs	r4, r4, #2
 8004d92:	2600      	movs	r6, #0
 8004d94:	42a6      	cmp	r6, r4
 8004d96:	d109      	bne.n	8004dac <__libc_init_array+0x24>
 8004d98:	4d0b      	ldr	r5, [pc, #44]	@ (8004dc8 <__libc_init_array+0x40>)
 8004d9a:	4c0c      	ldr	r4, [pc, #48]	@ (8004dcc <__libc_init_array+0x44>)
 8004d9c:	f000 fc66 	bl	800566c <_init>
 8004da0:	1b64      	subs	r4, r4, r5
 8004da2:	10a4      	asrs	r4, r4, #2
 8004da4:	2600      	movs	r6, #0
 8004da6:	42a6      	cmp	r6, r4
 8004da8:	d105      	bne.n	8004db6 <__libc_init_array+0x2e>
 8004daa:	bd70      	pop	{r4, r5, r6, pc}
 8004dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db0:	4798      	blx	r3
 8004db2:	3601      	adds	r6, #1
 8004db4:	e7ee      	b.n	8004d94 <__libc_init_array+0xc>
 8004db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dba:	4798      	blx	r3
 8004dbc:	3601      	adds	r6, #1
 8004dbe:	e7f2      	b.n	8004da6 <__libc_init_array+0x1e>
 8004dc0:	08005754 	.word	0x08005754
 8004dc4:	08005754 	.word	0x08005754
 8004dc8:	08005754 	.word	0x08005754
 8004dcc:	08005758 	.word	0x08005758

08004dd0 <__retarget_lock_acquire_recursive>:
 8004dd0:	4770      	bx	lr

08004dd2 <__retarget_lock_release_recursive>:
 8004dd2:	4770      	bx	lr

08004dd4 <memcpy>:
 8004dd4:	440a      	add	r2, r1
 8004dd6:	4291      	cmp	r1, r2
 8004dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ddc:	d100      	bne.n	8004de0 <memcpy+0xc>
 8004dde:	4770      	bx	lr
 8004de0:	b510      	push	{r4, lr}
 8004de2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004de6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dea:	4291      	cmp	r1, r2
 8004dec:	d1f9      	bne.n	8004de2 <memcpy+0xe>
 8004dee:	bd10      	pop	{r4, pc}

08004df0 <_free_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4605      	mov	r5, r0
 8004df4:	2900      	cmp	r1, #0
 8004df6:	d041      	beq.n	8004e7c <_free_r+0x8c>
 8004df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dfc:	1f0c      	subs	r4, r1, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bfb8      	it	lt
 8004e02:	18e4      	addlt	r4, r4, r3
 8004e04:	f000 f8e0 	bl	8004fc8 <__malloc_lock>
 8004e08:	4a1d      	ldr	r2, [pc, #116]	@ (8004e80 <_free_r+0x90>)
 8004e0a:	6813      	ldr	r3, [r2, #0]
 8004e0c:	b933      	cbnz	r3, 8004e1c <_free_r+0x2c>
 8004e0e:	6063      	str	r3, [r4, #4]
 8004e10:	6014      	str	r4, [r2, #0]
 8004e12:	4628      	mov	r0, r5
 8004e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e18:	f000 b8dc 	b.w	8004fd4 <__malloc_unlock>
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	d908      	bls.n	8004e32 <_free_r+0x42>
 8004e20:	6820      	ldr	r0, [r4, #0]
 8004e22:	1821      	adds	r1, r4, r0
 8004e24:	428b      	cmp	r3, r1
 8004e26:	bf01      	itttt	eq
 8004e28:	6819      	ldreq	r1, [r3, #0]
 8004e2a:	685b      	ldreq	r3, [r3, #4]
 8004e2c:	1809      	addeq	r1, r1, r0
 8004e2e:	6021      	streq	r1, [r4, #0]
 8004e30:	e7ed      	b.n	8004e0e <_free_r+0x1e>
 8004e32:	461a      	mov	r2, r3
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	b10b      	cbz	r3, 8004e3c <_free_r+0x4c>
 8004e38:	42a3      	cmp	r3, r4
 8004e3a:	d9fa      	bls.n	8004e32 <_free_r+0x42>
 8004e3c:	6811      	ldr	r1, [r2, #0]
 8004e3e:	1850      	adds	r0, r2, r1
 8004e40:	42a0      	cmp	r0, r4
 8004e42:	d10b      	bne.n	8004e5c <_free_r+0x6c>
 8004e44:	6820      	ldr	r0, [r4, #0]
 8004e46:	4401      	add	r1, r0
 8004e48:	1850      	adds	r0, r2, r1
 8004e4a:	4283      	cmp	r3, r0
 8004e4c:	6011      	str	r1, [r2, #0]
 8004e4e:	d1e0      	bne.n	8004e12 <_free_r+0x22>
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	6053      	str	r3, [r2, #4]
 8004e56:	4408      	add	r0, r1
 8004e58:	6010      	str	r0, [r2, #0]
 8004e5a:	e7da      	b.n	8004e12 <_free_r+0x22>
 8004e5c:	d902      	bls.n	8004e64 <_free_r+0x74>
 8004e5e:	230c      	movs	r3, #12
 8004e60:	602b      	str	r3, [r5, #0]
 8004e62:	e7d6      	b.n	8004e12 <_free_r+0x22>
 8004e64:	6820      	ldr	r0, [r4, #0]
 8004e66:	1821      	adds	r1, r4, r0
 8004e68:	428b      	cmp	r3, r1
 8004e6a:	bf04      	itt	eq
 8004e6c:	6819      	ldreq	r1, [r3, #0]
 8004e6e:	685b      	ldreq	r3, [r3, #4]
 8004e70:	6063      	str	r3, [r4, #4]
 8004e72:	bf04      	itt	eq
 8004e74:	1809      	addeq	r1, r1, r0
 8004e76:	6021      	streq	r1, [r4, #0]
 8004e78:	6054      	str	r4, [r2, #4]
 8004e7a:	e7ca      	b.n	8004e12 <_free_r+0x22>
 8004e7c:	bd38      	pop	{r3, r4, r5, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000338 	.word	0x20000338

08004e84 <sbrk_aligned>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	4e0f      	ldr	r6, [pc, #60]	@ (8004ec4 <sbrk_aligned+0x40>)
 8004e88:	460c      	mov	r4, r1
 8004e8a:	6831      	ldr	r1, [r6, #0]
 8004e8c:	4605      	mov	r5, r0
 8004e8e:	b911      	cbnz	r1, 8004e96 <sbrk_aligned+0x12>
 8004e90:	f000 fba6 	bl	80055e0 <_sbrk_r>
 8004e94:	6030      	str	r0, [r6, #0]
 8004e96:	4621      	mov	r1, r4
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f000 fba1 	bl	80055e0 <_sbrk_r>
 8004e9e:	1c43      	adds	r3, r0, #1
 8004ea0:	d103      	bne.n	8004eaa <sbrk_aligned+0x26>
 8004ea2:	f04f 34ff 	mov.w	r4, #4294967295
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	bd70      	pop	{r4, r5, r6, pc}
 8004eaa:	1cc4      	adds	r4, r0, #3
 8004eac:	f024 0403 	bic.w	r4, r4, #3
 8004eb0:	42a0      	cmp	r0, r4
 8004eb2:	d0f8      	beq.n	8004ea6 <sbrk_aligned+0x22>
 8004eb4:	1a21      	subs	r1, r4, r0
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f000 fb92 	bl	80055e0 <_sbrk_r>
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d1f2      	bne.n	8004ea6 <sbrk_aligned+0x22>
 8004ec0:	e7ef      	b.n	8004ea2 <sbrk_aligned+0x1e>
 8004ec2:	bf00      	nop
 8004ec4:	20000334 	.word	0x20000334

08004ec8 <_malloc_r>:
 8004ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ecc:	1ccd      	adds	r5, r1, #3
 8004ece:	f025 0503 	bic.w	r5, r5, #3
 8004ed2:	3508      	adds	r5, #8
 8004ed4:	2d0c      	cmp	r5, #12
 8004ed6:	bf38      	it	cc
 8004ed8:	250c      	movcc	r5, #12
 8004eda:	2d00      	cmp	r5, #0
 8004edc:	4606      	mov	r6, r0
 8004ede:	db01      	blt.n	8004ee4 <_malloc_r+0x1c>
 8004ee0:	42a9      	cmp	r1, r5
 8004ee2:	d904      	bls.n	8004eee <_malloc_r+0x26>
 8004ee4:	230c      	movs	r3, #12
 8004ee6:	6033      	str	r3, [r6, #0]
 8004ee8:	2000      	movs	r0, #0
 8004eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004fc4 <_malloc_r+0xfc>
 8004ef2:	f000 f869 	bl	8004fc8 <__malloc_lock>
 8004ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8004efa:	461c      	mov	r4, r3
 8004efc:	bb44      	cbnz	r4, 8004f50 <_malloc_r+0x88>
 8004efe:	4629      	mov	r1, r5
 8004f00:	4630      	mov	r0, r6
 8004f02:	f7ff ffbf 	bl	8004e84 <sbrk_aligned>
 8004f06:	1c43      	adds	r3, r0, #1
 8004f08:	4604      	mov	r4, r0
 8004f0a:	d158      	bne.n	8004fbe <_malloc_r+0xf6>
 8004f0c:	f8d8 4000 	ldr.w	r4, [r8]
 8004f10:	4627      	mov	r7, r4
 8004f12:	2f00      	cmp	r7, #0
 8004f14:	d143      	bne.n	8004f9e <_malloc_r+0xd6>
 8004f16:	2c00      	cmp	r4, #0
 8004f18:	d04b      	beq.n	8004fb2 <_malloc_r+0xea>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	4630      	mov	r0, r6
 8004f20:	eb04 0903 	add.w	r9, r4, r3
 8004f24:	f000 fb5c 	bl	80055e0 <_sbrk_r>
 8004f28:	4581      	cmp	r9, r0
 8004f2a:	d142      	bne.n	8004fb2 <_malloc_r+0xea>
 8004f2c:	6821      	ldr	r1, [r4, #0]
 8004f2e:	1a6d      	subs	r5, r5, r1
 8004f30:	4629      	mov	r1, r5
 8004f32:	4630      	mov	r0, r6
 8004f34:	f7ff ffa6 	bl	8004e84 <sbrk_aligned>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d03a      	beq.n	8004fb2 <_malloc_r+0xea>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	442b      	add	r3, r5
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	f8d8 3000 	ldr.w	r3, [r8]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	bb62      	cbnz	r2, 8004fa4 <_malloc_r+0xdc>
 8004f4a:	f8c8 7000 	str.w	r7, [r8]
 8004f4e:	e00f      	b.n	8004f70 <_malloc_r+0xa8>
 8004f50:	6822      	ldr	r2, [r4, #0]
 8004f52:	1b52      	subs	r2, r2, r5
 8004f54:	d420      	bmi.n	8004f98 <_malloc_r+0xd0>
 8004f56:	2a0b      	cmp	r2, #11
 8004f58:	d917      	bls.n	8004f8a <_malloc_r+0xc2>
 8004f5a:	1961      	adds	r1, r4, r5
 8004f5c:	42a3      	cmp	r3, r4
 8004f5e:	6025      	str	r5, [r4, #0]
 8004f60:	bf18      	it	ne
 8004f62:	6059      	strne	r1, [r3, #4]
 8004f64:	6863      	ldr	r3, [r4, #4]
 8004f66:	bf08      	it	eq
 8004f68:	f8c8 1000 	streq.w	r1, [r8]
 8004f6c:	5162      	str	r2, [r4, r5]
 8004f6e:	604b      	str	r3, [r1, #4]
 8004f70:	4630      	mov	r0, r6
 8004f72:	f000 f82f 	bl	8004fd4 <__malloc_unlock>
 8004f76:	f104 000b 	add.w	r0, r4, #11
 8004f7a:	1d23      	adds	r3, r4, #4
 8004f7c:	f020 0007 	bic.w	r0, r0, #7
 8004f80:	1ac2      	subs	r2, r0, r3
 8004f82:	bf1c      	itt	ne
 8004f84:	1a1b      	subne	r3, r3, r0
 8004f86:	50a3      	strne	r3, [r4, r2]
 8004f88:	e7af      	b.n	8004eea <_malloc_r+0x22>
 8004f8a:	6862      	ldr	r2, [r4, #4]
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	bf0c      	ite	eq
 8004f90:	f8c8 2000 	streq.w	r2, [r8]
 8004f94:	605a      	strne	r2, [r3, #4]
 8004f96:	e7eb      	b.n	8004f70 <_malloc_r+0xa8>
 8004f98:	4623      	mov	r3, r4
 8004f9a:	6864      	ldr	r4, [r4, #4]
 8004f9c:	e7ae      	b.n	8004efc <_malloc_r+0x34>
 8004f9e:	463c      	mov	r4, r7
 8004fa0:	687f      	ldr	r7, [r7, #4]
 8004fa2:	e7b6      	b.n	8004f12 <_malloc_r+0x4a>
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	42a3      	cmp	r3, r4
 8004faa:	d1fb      	bne.n	8004fa4 <_malloc_r+0xdc>
 8004fac:	2300      	movs	r3, #0
 8004fae:	6053      	str	r3, [r2, #4]
 8004fb0:	e7de      	b.n	8004f70 <_malloc_r+0xa8>
 8004fb2:	230c      	movs	r3, #12
 8004fb4:	6033      	str	r3, [r6, #0]
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	f000 f80c 	bl	8004fd4 <__malloc_unlock>
 8004fbc:	e794      	b.n	8004ee8 <_malloc_r+0x20>
 8004fbe:	6005      	str	r5, [r0, #0]
 8004fc0:	e7d6      	b.n	8004f70 <_malloc_r+0xa8>
 8004fc2:	bf00      	nop
 8004fc4:	20000338 	.word	0x20000338

08004fc8 <__malloc_lock>:
 8004fc8:	4801      	ldr	r0, [pc, #4]	@ (8004fd0 <__malloc_lock+0x8>)
 8004fca:	f7ff bf01 	b.w	8004dd0 <__retarget_lock_acquire_recursive>
 8004fce:	bf00      	nop
 8004fd0:	20000330 	.word	0x20000330

08004fd4 <__malloc_unlock>:
 8004fd4:	4801      	ldr	r0, [pc, #4]	@ (8004fdc <__malloc_unlock+0x8>)
 8004fd6:	f7ff befc 	b.w	8004dd2 <__retarget_lock_release_recursive>
 8004fda:	bf00      	nop
 8004fdc:	20000330 	.word	0x20000330

08004fe0 <__ssputs_r>:
 8004fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe4:	688e      	ldr	r6, [r1, #8]
 8004fe6:	461f      	mov	r7, r3
 8004fe8:	42be      	cmp	r6, r7
 8004fea:	680b      	ldr	r3, [r1, #0]
 8004fec:	4682      	mov	sl, r0
 8004fee:	460c      	mov	r4, r1
 8004ff0:	4690      	mov	r8, r2
 8004ff2:	d82d      	bhi.n	8005050 <__ssputs_r+0x70>
 8004ff4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ff8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ffc:	d026      	beq.n	800504c <__ssputs_r+0x6c>
 8004ffe:	6965      	ldr	r5, [r4, #20]
 8005000:	6909      	ldr	r1, [r1, #16]
 8005002:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005006:	eba3 0901 	sub.w	r9, r3, r1
 800500a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800500e:	1c7b      	adds	r3, r7, #1
 8005010:	444b      	add	r3, r9
 8005012:	106d      	asrs	r5, r5, #1
 8005014:	429d      	cmp	r5, r3
 8005016:	bf38      	it	cc
 8005018:	461d      	movcc	r5, r3
 800501a:	0553      	lsls	r3, r2, #21
 800501c:	d527      	bpl.n	800506e <__ssputs_r+0x8e>
 800501e:	4629      	mov	r1, r5
 8005020:	f7ff ff52 	bl	8004ec8 <_malloc_r>
 8005024:	4606      	mov	r6, r0
 8005026:	b360      	cbz	r0, 8005082 <__ssputs_r+0xa2>
 8005028:	6921      	ldr	r1, [r4, #16]
 800502a:	464a      	mov	r2, r9
 800502c:	f7ff fed2 	bl	8004dd4 <memcpy>
 8005030:	89a3      	ldrh	r3, [r4, #12]
 8005032:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800503a:	81a3      	strh	r3, [r4, #12]
 800503c:	6126      	str	r6, [r4, #16]
 800503e:	6165      	str	r5, [r4, #20]
 8005040:	444e      	add	r6, r9
 8005042:	eba5 0509 	sub.w	r5, r5, r9
 8005046:	6026      	str	r6, [r4, #0]
 8005048:	60a5      	str	r5, [r4, #8]
 800504a:	463e      	mov	r6, r7
 800504c:	42be      	cmp	r6, r7
 800504e:	d900      	bls.n	8005052 <__ssputs_r+0x72>
 8005050:	463e      	mov	r6, r7
 8005052:	6820      	ldr	r0, [r4, #0]
 8005054:	4632      	mov	r2, r6
 8005056:	4641      	mov	r1, r8
 8005058:	f000 faa8 	bl	80055ac <memmove>
 800505c:	68a3      	ldr	r3, [r4, #8]
 800505e:	1b9b      	subs	r3, r3, r6
 8005060:	60a3      	str	r3, [r4, #8]
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	4433      	add	r3, r6
 8005066:	6023      	str	r3, [r4, #0]
 8005068:	2000      	movs	r0, #0
 800506a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800506e:	462a      	mov	r2, r5
 8005070:	f000 fac6 	bl	8005600 <_realloc_r>
 8005074:	4606      	mov	r6, r0
 8005076:	2800      	cmp	r0, #0
 8005078:	d1e0      	bne.n	800503c <__ssputs_r+0x5c>
 800507a:	6921      	ldr	r1, [r4, #16]
 800507c:	4650      	mov	r0, sl
 800507e:	f7ff feb7 	bl	8004df0 <_free_r>
 8005082:	230c      	movs	r3, #12
 8005084:	f8ca 3000 	str.w	r3, [sl]
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800508e:	81a3      	strh	r3, [r4, #12]
 8005090:	f04f 30ff 	mov.w	r0, #4294967295
 8005094:	e7e9      	b.n	800506a <__ssputs_r+0x8a>
	...

08005098 <_svfiprintf_r>:
 8005098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509c:	4698      	mov	r8, r3
 800509e:	898b      	ldrh	r3, [r1, #12]
 80050a0:	061b      	lsls	r3, r3, #24
 80050a2:	b09d      	sub	sp, #116	@ 0x74
 80050a4:	4607      	mov	r7, r0
 80050a6:	460d      	mov	r5, r1
 80050a8:	4614      	mov	r4, r2
 80050aa:	d510      	bpl.n	80050ce <_svfiprintf_r+0x36>
 80050ac:	690b      	ldr	r3, [r1, #16]
 80050ae:	b973      	cbnz	r3, 80050ce <_svfiprintf_r+0x36>
 80050b0:	2140      	movs	r1, #64	@ 0x40
 80050b2:	f7ff ff09 	bl	8004ec8 <_malloc_r>
 80050b6:	6028      	str	r0, [r5, #0]
 80050b8:	6128      	str	r0, [r5, #16]
 80050ba:	b930      	cbnz	r0, 80050ca <_svfiprintf_r+0x32>
 80050bc:	230c      	movs	r3, #12
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295
 80050c4:	b01d      	add	sp, #116	@ 0x74
 80050c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ca:	2340      	movs	r3, #64	@ 0x40
 80050cc:	616b      	str	r3, [r5, #20]
 80050ce:	2300      	movs	r3, #0
 80050d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80050d2:	2320      	movs	r3, #32
 80050d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80050d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80050dc:	2330      	movs	r3, #48	@ 0x30
 80050de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800527c <_svfiprintf_r+0x1e4>
 80050e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050e6:	f04f 0901 	mov.w	r9, #1
 80050ea:	4623      	mov	r3, r4
 80050ec:	469a      	mov	sl, r3
 80050ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050f2:	b10a      	cbz	r2, 80050f8 <_svfiprintf_r+0x60>
 80050f4:	2a25      	cmp	r2, #37	@ 0x25
 80050f6:	d1f9      	bne.n	80050ec <_svfiprintf_r+0x54>
 80050f8:	ebba 0b04 	subs.w	fp, sl, r4
 80050fc:	d00b      	beq.n	8005116 <_svfiprintf_r+0x7e>
 80050fe:	465b      	mov	r3, fp
 8005100:	4622      	mov	r2, r4
 8005102:	4629      	mov	r1, r5
 8005104:	4638      	mov	r0, r7
 8005106:	f7ff ff6b 	bl	8004fe0 <__ssputs_r>
 800510a:	3001      	adds	r0, #1
 800510c:	f000 80a7 	beq.w	800525e <_svfiprintf_r+0x1c6>
 8005110:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005112:	445a      	add	r2, fp
 8005114:	9209      	str	r2, [sp, #36]	@ 0x24
 8005116:	f89a 3000 	ldrb.w	r3, [sl]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 809f 	beq.w	800525e <_svfiprintf_r+0x1c6>
 8005120:	2300      	movs	r3, #0
 8005122:	f04f 32ff 	mov.w	r2, #4294967295
 8005126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800512a:	f10a 0a01 	add.w	sl, sl, #1
 800512e:	9304      	str	r3, [sp, #16]
 8005130:	9307      	str	r3, [sp, #28]
 8005132:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005136:	931a      	str	r3, [sp, #104]	@ 0x68
 8005138:	4654      	mov	r4, sl
 800513a:	2205      	movs	r2, #5
 800513c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005140:	484e      	ldr	r0, [pc, #312]	@ (800527c <_svfiprintf_r+0x1e4>)
 8005142:	f7fb f865 	bl	8000210 <memchr>
 8005146:	9a04      	ldr	r2, [sp, #16]
 8005148:	b9d8      	cbnz	r0, 8005182 <_svfiprintf_r+0xea>
 800514a:	06d0      	lsls	r0, r2, #27
 800514c:	bf44      	itt	mi
 800514e:	2320      	movmi	r3, #32
 8005150:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005154:	0711      	lsls	r1, r2, #28
 8005156:	bf44      	itt	mi
 8005158:	232b      	movmi	r3, #43	@ 0x2b
 800515a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800515e:	f89a 3000 	ldrb.w	r3, [sl]
 8005162:	2b2a      	cmp	r3, #42	@ 0x2a
 8005164:	d015      	beq.n	8005192 <_svfiprintf_r+0xfa>
 8005166:	9a07      	ldr	r2, [sp, #28]
 8005168:	4654      	mov	r4, sl
 800516a:	2000      	movs	r0, #0
 800516c:	f04f 0c0a 	mov.w	ip, #10
 8005170:	4621      	mov	r1, r4
 8005172:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005176:	3b30      	subs	r3, #48	@ 0x30
 8005178:	2b09      	cmp	r3, #9
 800517a:	d94b      	bls.n	8005214 <_svfiprintf_r+0x17c>
 800517c:	b1b0      	cbz	r0, 80051ac <_svfiprintf_r+0x114>
 800517e:	9207      	str	r2, [sp, #28]
 8005180:	e014      	b.n	80051ac <_svfiprintf_r+0x114>
 8005182:	eba0 0308 	sub.w	r3, r0, r8
 8005186:	fa09 f303 	lsl.w	r3, r9, r3
 800518a:	4313      	orrs	r3, r2
 800518c:	9304      	str	r3, [sp, #16]
 800518e:	46a2      	mov	sl, r4
 8005190:	e7d2      	b.n	8005138 <_svfiprintf_r+0xa0>
 8005192:	9b03      	ldr	r3, [sp, #12]
 8005194:	1d19      	adds	r1, r3, #4
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	9103      	str	r1, [sp, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	bfbb      	ittet	lt
 800519e:	425b      	neglt	r3, r3
 80051a0:	f042 0202 	orrlt.w	r2, r2, #2
 80051a4:	9307      	strge	r3, [sp, #28]
 80051a6:	9307      	strlt	r3, [sp, #28]
 80051a8:	bfb8      	it	lt
 80051aa:	9204      	strlt	r2, [sp, #16]
 80051ac:	7823      	ldrb	r3, [r4, #0]
 80051ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80051b0:	d10a      	bne.n	80051c8 <_svfiprintf_r+0x130>
 80051b2:	7863      	ldrb	r3, [r4, #1]
 80051b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80051b6:	d132      	bne.n	800521e <_svfiprintf_r+0x186>
 80051b8:	9b03      	ldr	r3, [sp, #12]
 80051ba:	1d1a      	adds	r2, r3, #4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	9203      	str	r2, [sp, #12]
 80051c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80051c4:	3402      	adds	r4, #2
 80051c6:	9305      	str	r3, [sp, #20]
 80051c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800528c <_svfiprintf_r+0x1f4>
 80051cc:	7821      	ldrb	r1, [r4, #0]
 80051ce:	2203      	movs	r2, #3
 80051d0:	4650      	mov	r0, sl
 80051d2:	f7fb f81d 	bl	8000210 <memchr>
 80051d6:	b138      	cbz	r0, 80051e8 <_svfiprintf_r+0x150>
 80051d8:	9b04      	ldr	r3, [sp, #16]
 80051da:	eba0 000a 	sub.w	r0, r0, sl
 80051de:	2240      	movs	r2, #64	@ 0x40
 80051e0:	4082      	lsls	r2, r0
 80051e2:	4313      	orrs	r3, r2
 80051e4:	3401      	adds	r4, #1
 80051e6:	9304      	str	r3, [sp, #16]
 80051e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ec:	4824      	ldr	r0, [pc, #144]	@ (8005280 <_svfiprintf_r+0x1e8>)
 80051ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051f2:	2206      	movs	r2, #6
 80051f4:	f7fb f80c 	bl	8000210 <memchr>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d036      	beq.n	800526a <_svfiprintf_r+0x1d2>
 80051fc:	4b21      	ldr	r3, [pc, #132]	@ (8005284 <_svfiprintf_r+0x1ec>)
 80051fe:	bb1b      	cbnz	r3, 8005248 <_svfiprintf_r+0x1b0>
 8005200:	9b03      	ldr	r3, [sp, #12]
 8005202:	3307      	adds	r3, #7
 8005204:	f023 0307 	bic.w	r3, r3, #7
 8005208:	3308      	adds	r3, #8
 800520a:	9303      	str	r3, [sp, #12]
 800520c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800520e:	4433      	add	r3, r6
 8005210:	9309      	str	r3, [sp, #36]	@ 0x24
 8005212:	e76a      	b.n	80050ea <_svfiprintf_r+0x52>
 8005214:	fb0c 3202 	mla	r2, ip, r2, r3
 8005218:	460c      	mov	r4, r1
 800521a:	2001      	movs	r0, #1
 800521c:	e7a8      	b.n	8005170 <_svfiprintf_r+0xd8>
 800521e:	2300      	movs	r3, #0
 8005220:	3401      	adds	r4, #1
 8005222:	9305      	str	r3, [sp, #20]
 8005224:	4619      	mov	r1, r3
 8005226:	f04f 0c0a 	mov.w	ip, #10
 800522a:	4620      	mov	r0, r4
 800522c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005230:	3a30      	subs	r2, #48	@ 0x30
 8005232:	2a09      	cmp	r2, #9
 8005234:	d903      	bls.n	800523e <_svfiprintf_r+0x1a6>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0c6      	beq.n	80051c8 <_svfiprintf_r+0x130>
 800523a:	9105      	str	r1, [sp, #20]
 800523c:	e7c4      	b.n	80051c8 <_svfiprintf_r+0x130>
 800523e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005242:	4604      	mov	r4, r0
 8005244:	2301      	movs	r3, #1
 8005246:	e7f0      	b.n	800522a <_svfiprintf_r+0x192>
 8005248:	ab03      	add	r3, sp, #12
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	462a      	mov	r2, r5
 800524e:	4b0e      	ldr	r3, [pc, #56]	@ (8005288 <_svfiprintf_r+0x1f0>)
 8005250:	a904      	add	r1, sp, #16
 8005252:	4638      	mov	r0, r7
 8005254:	f3af 8000 	nop.w
 8005258:	1c42      	adds	r2, r0, #1
 800525a:	4606      	mov	r6, r0
 800525c:	d1d6      	bne.n	800520c <_svfiprintf_r+0x174>
 800525e:	89ab      	ldrh	r3, [r5, #12]
 8005260:	065b      	lsls	r3, r3, #25
 8005262:	f53f af2d 	bmi.w	80050c0 <_svfiprintf_r+0x28>
 8005266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005268:	e72c      	b.n	80050c4 <_svfiprintf_r+0x2c>
 800526a:	ab03      	add	r3, sp, #12
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	462a      	mov	r2, r5
 8005270:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <_svfiprintf_r+0x1f0>)
 8005272:	a904      	add	r1, sp, #16
 8005274:	4638      	mov	r0, r7
 8005276:	f000 f879 	bl	800536c <_printf_i>
 800527a:	e7ed      	b.n	8005258 <_svfiprintf_r+0x1c0>
 800527c:	08005718 	.word	0x08005718
 8005280:	08005722 	.word	0x08005722
 8005284:	00000000 	.word	0x00000000
 8005288:	08004fe1 	.word	0x08004fe1
 800528c:	0800571e 	.word	0x0800571e

08005290 <_printf_common>:
 8005290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005294:	4616      	mov	r6, r2
 8005296:	4698      	mov	r8, r3
 8005298:	688a      	ldr	r2, [r1, #8]
 800529a:	690b      	ldr	r3, [r1, #16]
 800529c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052a0:	4293      	cmp	r3, r2
 80052a2:	bfb8      	it	lt
 80052a4:	4613      	movlt	r3, r2
 80052a6:	6033      	str	r3, [r6, #0]
 80052a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052ac:	4607      	mov	r7, r0
 80052ae:	460c      	mov	r4, r1
 80052b0:	b10a      	cbz	r2, 80052b6 <_printf_common+0x26>
 80052b2:	3301      	adds	r3, #1
 80052b4:	6033      	str	r3, [r6, #0]
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	0699      	lsls	r1, r3, #26
 80052ba:	bf42      	ittt	mi
 80052bc:	6833      	ldrmi	r3, [r6, #0]
 80052be:	3302      	addmi	r3, #2
 80052c0:	6033      	strmi	r3, [r6, #0]
 80052c2:	6825      	ldr	r5, [r4, #0]
 80052c4:	f015 0506 	ands.w	r5, r5, #6
 80052c8:	d106      	bne.n	80052d8 <_printf_common+0x48>
 80052ca:	f104 0a19 	add.w	sl, r4, #25
 80052ce:	68e3      	ldr	r3, [r4, #12]
 80052d0:	6832      	ldr	r2, [r6, #0]
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	42ab      	cmp	r3, r5
 80052d6:	dc26      	bgt.n	8005326 <_printf_common+0x96>
 80052d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052dc:	6822      	ldr	r2, [r4, #0]
 80052de:	3b00      	subs	r3, #0
 80052e0:	bf18      	it	ne
 80052e2:	2301      	movne	r3, #1
 80052e4:	0692      	lsls	r2, r2, #26
 80052e6:	d42b      	bmi.n	8005340 <_printf_common+0xb0>
 80052e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052ec:	4641      	mov	r1, r8
 80052ee:	4638      	mov	r0, r7
 80052f0:	47c8      	blx	r9
 80052f2:	3001      	adds	r0, #1
 80052f4:	d01e      	beq.n	8005334 <_printf_common+0xa4>
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	6922      	ldr	r2, [r4, #16]
 80052fa:	f003 0306 	and.w	r3, r3, #6
 80052fe:	2b04      	cmp	r3, #4
 8005300:	bf02      	ittt	eq
 8005302:	68e5      	ldreq	r5, [r4, #12]
 8005304:	6833      	ldreq	r3, [r6, #0]
 8005306:	1aed      	subeq	r5, r5, r3
 8005308:	68a3      	ldr	r3, [r4, #8]
 800530a:	bf0c      	ite	eq
 800530c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005310:	2500      	movne	r5, #0
 8005312:	4293      	cmp	r3, r2
 8005314:	bfc4      	itt	gt
 8005316:	1a9b      	subgt	r3, r3, r2
 8005318:	18ed      	addgt	r5, r5, r3
 800531a:	2600      	movs	r6, #0
 800531c:	341a      	adds	r4, #26
 800531e:	42b5      	cmp	r5, r6
 8005320:	d11a      	bne.n	8005358 <_printf_common+0xc8>
 8005322:	2000      	movs	r0, #0
 8005324:	e008      	b.n	8005338 <_printf_common+0xa8>
 8005326:	2301      	movs	r3, #1
 8005328:	4652      	mov	r2, sl
 800532a:	4641      	mov	r1, r8
 800532c:	4638      	mov	r0, r7
 800532e:	47c8      	blx	r9
 8005330:	3001      	adds	r0, #1
 8005332:	d103      	bne.n	800533c <_printf_common+0xac>
 8005334:	f04f 30ff 	mov.w	r0, #4294967295
 8005338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800533c:	3501      	adds	r5, #1
 800533e:	e7c6      	b.n	80052ce <_printf_common+0x3e>
 8005340:	18e1      	adds	r1, r4, r3
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	2030      	movs	r0, #48	@ 0x30
 8005346:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800534a:	4422      	add	r2, r4
 800534c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005350:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005354:	3302      	adds	r3, #2
 8005356:	e7c7      	b.n	80052e8 <_printf_common+0x58>
 8005358:	2301      	movs	r3, #1
 800535a:	4622      	mov	r2, r4
 800535c:	4641      	mov	r1, r8
 800535e:	4638      	mov	r0, r7
 8005360:	47c8      	blx	r9
 8005362:	3001      	adds	r0, #1
 8005364:	d0e6      	beq.n	8005334 <_printf_common+0xa4>
 8005366:	3601      	adds	r6, #1
 8005368:	e7d9      	b.n	800531e <_printf_common+0x8e>
	...

0800536c <_printf_i>:
 800536c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005370:	7e0f      	ldrb	r7, [r1, #24]
 8005372:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005374:	2f78      	cmp	r7, #120	@ 0x78
 8005376:	4691      	mov	r9, r2
 8005378:	4680      	mov	r8, r0
 800537a:	460c      	mov	r4, r1
 800537c:	469a      	mov	sl, r3
 800537e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005382:	d807      	bhi.n	8005394 <_printf_i+0x28>
 8005384:	2f62      	cmp	r7, #98	@ 0x62
 8005386:	d80a      	bhi.n	800539e <_printf_i+0x32>
 8005388:	2f00      	cmp	r7, #0
 800538a:	f000 80d2 	beq.w	8005532 <_printf_i+0x1c6>
 800538e:	2f58      	cmp	r7, #88	@ 0x58
 8005390:	f000 80b9 	beq.w	8005506 <_printf_i+0x19a>
 8005394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005398:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800539c:	e03a      	b.n	8005414 <_printf_i+0xa8>
 800539e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053a2:	2b15      	cmp	r3, #21
 80053a4:	d8f6      	bhi.n	8005394 <_printf_i+0x28>
 80053a6:	a101      	add	r1, pc, #4	@ (adr r1, 80053ac <_printf_i+0x40>)
 80053a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053ac:	08005405 	.word	0x08005405
 80053b0:	08005419 	.word	0x08005419
 80053b4:	08005395 	.word	0x08005395
 80053b8:	08005395 	.word	0x08005395
 80053bc:	08005395 	.word	0x08005395
 80053c0:	08005395 	.word	0x08005395
 80053c4:	08005419 	.word	0x08005419
 80053c8:	08005395 	.word	0x08005395
 80053cc:	08005395 	.word	0x08005395
 80053d0:	08005395 	.word	0x08005395
 80053d4:	08005395 	.word	0x08005395
 80053d8:	08005519 	.word	0x08005519
 80053dc:	08005443 	.word	0x08005443
 80053e0:	080054d3 	.word	0x080054d3
 80053e4:	08005395 	.word	0x08005395
 80053e8:	08005395 	.word	0x08005395
 80053ec:	0800553b 	.word	0x0800553b
 80053f0:	08005395 	.word	0x08005395
 80053f4:	08005443 	.word	0x08005443
 80053f8:	08005395 	.word	0x08005395
 80053fc:	08005395 	.word	0x08005395
 8005400:	080054db 	.word	0x080054db
 8005404:	6833      	ldr	r3, [r6, #0]
 8005406:	1d1a      	adds	r2, r3, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6032      	str	r2, [r6, #0]
 800540c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005410:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005414:	2301      	movs	r3, #1
 8005416:	e09d      	b.n	8005554 <_printf_i+0x1e8>
 8005418:	6833      	ldr	r3, [r6, #0]
 800541a:	6820      	ldr	r0, [r4, #0]
 800541c:	1d19      	adds	r1, r3, #4
 800541e:	6031      	str	r1, [r6, #0]
 8005420:	0606      	lsls	r6, r0, #24
 8005422:	d501      	bpl.n	8005428 <_printf_i+0xbc>
 8005424:	681d      	ldr	r5, [r3, #0]
 8005426:	e003      	b.n	8005430 <_printf_i+0xc4>
 8005428:	0645      	lsls	r5, r0, #25
 800542a:	d5fb      	bpl.n	8005424 <_printf_i+0xb8>
 800542c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005430:	2d00      	cmp	r5, #0
 8005432:	da03      	bge.n	800543c <_printf_i+0xd0>
 8005434:	232d      	movs	r3, #45	@ 0x2d
 8005436:	426d      	negs	r5, r5
 8005438:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800543c:	4859      	ldr	r0, [pc, #356]	@ (80055a4 <_printf_i+0x238>)
 800543e:	230a      	movs	r3, #10
 8005440:	e011      	b.n	8005466 <_printf_i+0xfa>
 8005442:	6821      	ldr	r1, [r4, #0]
 8005444:	6833      	ldr	r3, [r6, #0]
 8005446:	0608      	lsls	r0, r1, #24
 8005448:	f853 5b04 	ldr.w	r5, [r3], #4
 800544c:	d402      	bmi.n	8005454 <_printf_i+0xe8>
 800544e:	0649      	lsls	r1, r1, #25
 8005450:	bf48      	it	mi
 8005452:	b2ad      	uxthmi	r5, r5
 8005454:	2f6f      	cmp	r7, #111	@ 0x6f
 8005456:	4853      	ldr	r0, [pc, #332]	@ (80055a4 <_printf_i+0x238>)
 8005458:	6033      	str	r3, [r6, #0]
 800545a:	bf14      	ite	ne
 800545c:	230a      	movne	r3, #10
 800545e:	2308      	moveq	r3, #8
 8005460:	2100      	movs	r1, #0
 8005462:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005466:	6866      	ldr	r6, [r4, #4]
 8005468:	60a6      	str	r6, [r4, #8]
 800546a:	2e00      	cmp	r6, #0
 800546c:	bfa2      	ittt	ge
 800546e:	6821      	ldrge	r1, [r4, #0]
 8005470:	f021 0104 	bicge.w	r1, r1, #4
 8005474:	6021      	strge	r1, [r4, #0]
 8005476:	b90d      	cbnz	r5, 800547c <_printf_i+0x110>
 8005478:	2e00      	cmp	r6, #0
 800547a:	d04b      	beq.n	8005514 <_printf_i+0x1a8>
 800547c:	4616      	mov	r6, r2
 800547e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005482:	fb03 5711 	mls	r7, r3, r1, r5
 8005486:	5dc7      	ldrb	r7, [r0, r7]
 8005488:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800548c:	462f      	mov	r7, r5
 800548e:	42bb      	cmp	r3, r7
 8005490:	460d      	mov	r5, r1
 8005492:	d9f4      	bls.n	800547e <_printf_i+0x112>
 8005494:	2b08      	cmp	r3, #8
 8005496:	d10b      	bne.n	80054b0 <_printf_i+0x144>
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	07df      	lsls	r7, r3, #31
 800549c:	d508      	bpl.n	80054b0 <_printf_i+0x144>
 800549e:	6923      	ldr	r3, [r4, #16]
 80054a0:	6861      	ldr	r1, [r4, #4]
 80054a2:	4299      	cmp	r1, r3
 80054a4:	bfde      	ittt	le
 80054a6:	2330      	movle	r3, #48	@ 0x30
 80054a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054b0:	1b92      	subs	r2, r2, r6
 80054b2:	6122      	str	r2, [r4, #16]
 80054b4:	f8cd a000 	str.w	sl, [sp]
 80054b8:	464b      	mov	r3, r9
 80054ba:	aa03      	add	r2, sp, #12
 80054bc:	4621      	mov	r1, r4
 80054be:	4640      	mov	r0, r8
 80054c0:	f7ff fee6 	bl	8005290 <_printf_common>
 80054c4:	3001      	adds	r0, #1
 80054c6:	d14a      	bne.n	800555e <_printf_i+0x1f2>
 80054c8:	f04f 30ff 	mov.w	r0, #4294967295
 80054cc:	b004      	add	sp, #16
 80054ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	f043 0320 	orr.w	r3, r3, #32
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	4833      	ldr	r0, [pc, #204]	@ (80055a8 <_printf_i+0x23c>)
 80054dc:	2778      	movs	r7, #120	@ 0x78
 80054de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	6831      	ldr	r1, [r6, #0]
 80054e6:	061f      	lsls	r7, r3, #24
 80054e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80054ec:	d402      	bmi.n	80054f4 <_printf_i+0x188>
 80054ee:	065f      	lsls	r7, r3, #25
 80054f0:	bf48      	it	mi
 80054f2:	b2ad      	uxthmi	r5, r5
 80054f4:	6031      	str	r1, [r6, #0]
 80054f6:	07d9      	lsls	r1, r3, #31
 80054f8:	bf44      	itt	mi
 80054fa:	f043 0320 	orrmi.w	r3, r3, #32
 80054fe:	6023      	strmi	r3, [r4, #0]
 8005500:	b11d      	cbz	r5, 800550a <_printf_i+0x19e>
 8005502:	2310      	movs	r3, #16
 8005504:	e7ac      	b.n	8005460 <_printf_i+0xf4>
 8005506:	4827      	ldr	r0, [pc, #156]	@ (80055a4 <_printf_i+0x238>)
 8005508:	e7e9      	b.n	80054de <_printf_i+0x172>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	f023 0320 	bic.w	r3, r3, #32
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	e7f6      	b.n	8005502 <_printf_i+0x196>
 8005514:	4616      	mov	r6, r2
 8005516:	e7bd      	b.n	8005494 <_printf_i+0x128>
 8005518:	6833      	ldr	r3, [r6, #0]
 800551a:	6825      	ldr	r5, [r4, #0]
 800551c:	6961      	ldr	r1, [r4, #20]
 800551e:	1d18      	adds	r0, r3, #4
 8005520:	6030      	str	r0, [r6, #0]
 8005522:	062e      	lsls	r6, r5, #24
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	d501      	bpl.n	800552c <_printf_i+0x1c0>
 8005528:	6019      	str	r1, [r3, #0]
 800552a:	e002      	b.n	8005532 <_printf_i+0x1c6>
 800552c:	0668      	lsls	r0, r5, #25
 800552e:	d5fb      	bpl.n	8005528 <_printf_i+0x1bc>
 8005530:	8019      	strh	r1, [r3, #0]
 8005532:	2300      	movs	r3, #0
 8005534:	6123      	str	r3, [r4, #16]
 8005536:	4616      	mov	r6, r2
 8005538:	e7bc      	b.n	80054b4 <_printf_i+0x148>
 800553a:	6833      	ldr	r3, [r6, #0]
 800553c:	1d1a      	adds	r2, r3, #4
 800553e:	6032      	str	r2, [r6, #0]
 8005540:	681e      	ldr	r6, [r3, #0]
 8005542:	6862      	ldr	r2, [r4, #4]
 8005544:	2100      	movs	r1, #0
 8005546:	4630      	mov	r0, r6
 8005548:	f7fa fe62 	bl	8000210 <memchr>
 800554c:	b108      	cbz	r0, 8005552 <_printf_i+0x1e6>
 800554e:	1b80      	subs	r0, r0, r6
 8005550:	6060      	str	r0, [r4, #4]
 8005552:	6863      	ldr	r3, [r4, #4]
 8005554:	6123      	str	r3, [r4, #16]
 8005556:	2300      	movs	r3, #0
 8005558:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800555c:	e7aa      	b.n	80054b4 <_printf_i+0x148>
 800555e:	6923      	ldr	r3, [r4, #16]
 8005560:	4632      	mov	r2, r6
 8005562:	4649      	mov	r1, r9
 8005564:	4640      	mov	r0, r8
 8005566:	47d0      	blx	sl
 8005568:	3001      	adds	r0, #1
 800556a:	d0ad      	beq.n	80054c8 <_printf_i+0x15c>
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	079b      	lsls	r3, r3, #30
 8005570:	d413      	bmi.n	800559a <_printf_i+0x22e>
 8005572:	68e0      	ldr	r0, [r4, #12]
 8005574:	9b03      	ldr	r3, [sp, #12]
 8005576:	4298      	cmp	r0, r3
 8005578:	bfb8      	it	lt
 800557a:	4618      	movlt	r0, r3
 800557c:	e7a6      	b.n	80054cc <_printf_i+0x160>
 800557e:	2301      	movs	r3, #1
 8005580:	4632      	mov	r2, r6
 8005582:	4649      	mov	r1, r9
 8005584:	4640      	mov	r0, r8
 8005586:	47d0      	blx	sl
 8005588:	3001      	adds	r0, #1
 800558a:	d09d      	beq.n	80054c8 <_printf_i+0x15c>
 800558c:	3501      	adds	r5, #1
 800558e:	68e3      	ldr	r3, [r4, #12]
 8005590:	9903      	ldr	r1, [sp, #12]
 8005592:	1a5b      	subs	r3, r3, r1
 8005594:	42ab      	cmp	r3, r5
 8005596:	dcf2      	bgt.n	800557e <_printf_i+0x212>
 8005598:	e7eb      	b.n	8005572 <_printf_i+0x206>
 800559a:	2500      	movs	r5, #0
 800559c:	f104 0619 	add.w	r6, r4, #25
 80055a0:	e7f5      	b.n	800558e <_printf_i+0x222>
 80055a2:	bf00      	nop
 80055a4:	08005729 	.word	0x08005729
 80055a8:	0800573a 	.word	0x0800573a

080055ac <memmove>:
 80055ac:	4288      	cmp	r0, r1
 80055ae:	b510      	push	{r4, lr}
 80055b0:	eb01 0402 	add.w	r4, r1, r2
 80055b4:	d902      	bls.n	80055bc <memmove+0x10>
 80055b6:	4284      	cmp	r4, r0
 80055b8:	4623      	mov	r3, r4
 80055ba:	d807      	bhi.n	80055cc <memmove+0x20>
 80055bc:	1e43      	subs	r3, r0, #1
 80055be:	42a1      	cmp	r1, r4
 80055c0:	d008      	beq.n	80055d4 <memmove+0x28>
 80055c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055ca:	e7f8      	b.n	80055be <memmove+0x12>
 80055cc:	4402      	add	r2, r0
 80055ce:	4601      	mov	r1, r0
 80055d0:	428a      	cmp	r2, r1
 80055d2:	d100      	bne.n	80055d6 <memmove+0x2a>
 80055d4:	bd10      	pop	{r4, pc}
 80055d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055de:	e7f7      	b.n	80055d0 <memmove+0x24>

080055e0 <_sbrk_r>:
 80055e0:	b538      	push	{r3, r4, r5, lr}
 80055e2:	4d06      	ldr	r5, [pc, #24]	@ (80055fc <_sbrk_r+0x1c>)
 80055e4:	2300      	movs	r3, #0
 80055e6:	4604      	mov	r4, r0
 80055e8:	4608      	mov	r0, r1
 80055ea:	602b      	str	r3, [r5, #0]
 80055ec:	f7fb fbe8 	bl	8000dc0 <_sbrk>
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	d102      	bne.n	80055fa <_sbrk_r+0x1a>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	b103      	cbz	r3, 80055fa <_sbrk_r+0x1a>
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
 80055fc:	2000032c 	.word	0x2000032c

08005600 <_realloc_r>:
 8005600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005604:	4680      	mov	r8, r0
 8005606:	4615      	mov	r5, r2
 8005608:	460c      	mov	r4, r1
 800560a:	b921      	cbnz	r1, 8005616 <_realloc_r+0x16>
 800560c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005610:	4611      	mov	r1, r2
 8005612:	f7ff bc59 	b.w	8004ec8 <_malloc_r>
 8005616:	b92a      	cbnz	r2, 8005624 <_realloc_r+0x24>
 8005618:	f7ff fbea 	bl	8004df0 <_free_r>
 800561c:	2400      	movs	r4, #0
 800561e:	4620      	mov	r0, r4
 8005620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005624:	f000 f81a 	bl	800565c <_malloc_usable_size_r>
 8005628:	4285      	cmp	r5, r0
 800562a:	4606      	mov	r6, r0
 800562c:	d802      	bhi.n	8005634 <_realloc_r+0x34>
 800562e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005632:	d8f4      	bhi.n	800561e <_realloc_r+0x1e>
 8005634:	4629      	mov	r1, r5
 8005636:	4640      	mov	r0, r8
 8005638:	f7ff fc46 	bl	8004ec8 <_malloc_r>
 800563c:	4607      	mov	r7, r0
 800563e:	2800      	cmp	r0, #0
 8005640:	d0ec      	beq.n	800561c <_realloc_r+0x1c>
 8005642:	42b5      	cmp	r5, r6
 8005644:	462a      	mov	r2, r5
 8005646:	4621      	mov	r1, r4
 8005648:	bf28      	it	cs
 800564a:	4632      	movcs	r2, r6
 800564c:	f7ff fbc2 	bl	8004dd4 <memcpy>
 8005650:	4621      	mov	r1, r4
 8005652:	4640      	mov	r0, r8
 8005654:	f7ff fbcc 	bl	8004df0 <_free_r>
 8005658:	463c      	mov	r4, r7
 800565a:	e7e0      	b.n	800561e <_realloc_r+0x1e>

0800565c <_malloc_usable_size_r>:
 800565c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005660:	1f18      	subs	r0, r3, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	bfbc      	itt	lt
 8005666:	580b      	ldrlt	r3, [r1, r0]
 8005668:	18c0      	addlt	r0, r0, r3
 800566a:	4770      	bx	lr

0800566c <_init>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	bf00      	nop
 8005670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005672:	bc08      	pop	{r3}
 8005674:	469e      	mov	lr, r3
 8005676:	4770      	bx	lr

08005678 <_fini>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	bf00      	nop
 800567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567e:	bc08      	pop	{r3}
 8005680:	469e      	mov	lr, r3
 8005682:	4770      	bx	lr
